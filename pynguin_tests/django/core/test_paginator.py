# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import paginator as module_0
import collections as module_1
import inspect as module_2
import re as module_3


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.Paginator(none_type_0, none_type_0, none_type_0, none_type_0, none_type_0)


def test_case_1():
    invalid_page_0 = module_0.InvalidPage()


@pytest.mark.xfail(strict=True)
def test_case_2():
    empty_page_0 = module_0.EmptyPage()
    page_0 = module_0.Page(empty_page_0, empty_page_0, empty_page_0)
    assert f"{type(page_0).__module__}.{type(page_0).__qualname__}" == "paginator.Page"
    assert (
        f"{type(page_0.object_list).__module__}.{type(page_0.object_list).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.number).__module__}.{type(page_0.number).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.paginator).__module__}.{type(page_0.paginator).__qualname__}"
        == "paginator.EmptyPage"
    )
    module_0.Paginator(page_0, page_0, page_0, page_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = paginator_0.get_page(empty_page_0)
    var_3 = var_2.__repr__()
    assert var_3 == "<Page 1 of 1>"
    var_1.get_page(var_3)


@pytest.mark.xfail(strict=True)
def test_case_4():
    empty_page_0 = module_0.EmptyPage()
    var_0 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(empty_page_0, var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(var_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    page_0 = module_0.Page(none_type_0, none_type_0, none_type_0)
    assert f"{type(page_0).__module__}.{type(page_0).__qualname__}" == "paginator.Page"
    assert page_0.object_list is None
    assert page_0.number is None
    assert page_0.paginator is None
    page_0.previous_page_number()


@pytest.mark.xfail(strict=True)
def test_case_6():
    empty_page_0 = module_0.EmptyPage()
    var_0 = module_2.iscoroutine(empty_page_0)
    var_1 = module_2.iscoroutine(empty_page_0)
    module_0.Paginator(var_1, var_0, var_0, var_1, empty_page_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = paginator_0.get_page(empty_page_0)
    var_2.next_page_number()


@pytest.mark.xfail(strict=True)
def test_case_8():
    empty_page_0 = module_0.EmptyPage()
    page_0 = module_0.Page(empty_page_0, empty_page_0, empty_page_0)
    assert f"{type(page_0).__module__}.{type(page_0).__qualname__}" == "paginator.Page"
    assert (
        f"{type(page_0.object_list).__module__}.{type(page_0.object_list).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.number).__module__}.{type(page_0.number).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.paginator).__module__}.{type(page_0.paginator).__qualname__}"
        == "paginator.EmptyPage"
    )
    var_0 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(page_0, var_0)
    assert (
        f"{type(paginator_0).__module__}.{type(paginator_0).__qualname__}"
        == "paginator.Paginator"
    )
    assert (
        f"{type(paginator_0.object_list).__module__}.{type(paginator_0.object_list).__qualname__}"
        == "paginator.Page"
    )
    assert paginator_0.per_page == 0
    assert paginator_0.orphans == 0
    assert paginator_0.allow_empty_first_page is True
    assert (
        f"{type(paginator_0.error_messages).__module__}.{type(paginator_0.error_messages).__qualname__}"
        == "builtins.dict"
    )
    assert len(paginator_0.error_messages) == 3
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0.__contains__(page_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    empty_page_0 = module_0.EmptyPage()
    page_0 = module_0.Page(empty_page_0, empty_page_0, empty_page_0)
    assert f"{type(page_0).__module__}.{type(page_0).__qualname__}" == "paginator.Page"
    assert (
        f"{type(page_0.object_list).__module__}.{type(page_0.object_list).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.number).__module__}.{type(page_0.number).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.paginator).__module__}.{type(page_0.paginator).__qualname__}"
        == "paginator.EmptyPage"
    )
    var_0 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(var_0, var_0, var_0, var_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0.has_next()


def test_case_10():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    with pytest.raises(TypeError):
        var_1.__getitem__(invalid_page_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    empty_page_0 = module_0.EmptyPage()
    var_0 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(var_0, var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(paginator_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = var_1.has_other_pages()
    assert var_2 is False
    var_2.get_page(var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    empty_page_0 = module_0.EmptyPage()
    page_0 = module_0.Page(empty_page_0, empty_page_0, empty_page_0)
    assert f"{type(page_0).__module__}.{type(page_0).__qualname__}" == "paginator.Page"
    assert (
        f"{type(page_0.object_list).__module__}.{type(page_0.object_list).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.number).__module__}.{type(page_0.number).__qualname__}"
        == "paginator.EmptyPage"
    )
    assert (
        f"{type(page_0.paginator).__module__}.{type(page_0.paginator).__qualname__}"
        == "paginator.EmptyPage"
    )
    var_0 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(page_0, var_0)
    assert (
        f"{type(paginator_0).__module__}.{type(paginator_0).__qualname__}"
        == "paginator.Paginator"
    )
    assert (
        f"{type(paginator_0.object_list).__module__}.{type(paginator_0.object_list).__qualname__}"
        == "paginator.Page"
    )
    assert paginator_0.per_page == 0
    assert paginator_0.orphans == 0
    assert paginator_0.allow_empty_first_page is True
    assert (
        f"{type(paginator_0.error_messages).__module__}.{type(paginator_0.error_messages).__qualname__}"
        == "builtins.dict"
    )
    assert len(paginator_0.error_messages) == 3
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(paginator_0)


def test_case_14():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = module_2.isfunction(user_string_0)
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 0
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )


@pytest.mark.xfail(strict=True)
def test_case_15():
    empty_page_0 = module_0.EmptyPage()
    var_0 = module_3.RegexFlag.MULTILINE
    page_not_an_integer_0 = module_0.PageNotAnInteger()
    paginator_0 = module_0.Paginator(var_0, var_0, var_0, var_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(var_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    empty_page_0 = module_3.purge()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = module_2.isfunction(user_string_0)
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    module_0.InvalidPage(*paginator_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    empty_page_0 = module_0.EmptyPage()
    var_0 = module_2.stack()
    var_1 = module_2.iscoroutine(empty_page_0)
    paginator_0 = module_0.Paginator(var_0, var_1, allow_empty_first_page=var_1)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(var_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = module_2.isfunction(user_string_0)
    var_1 = var_0.__repr__()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_1)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(user_string_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = module_2.isfunction(user_string_0)
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(user_string_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    empty_page_0 = module_0.EmptyPage()
    empty_page_1 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_1)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    empty_page_1.get_page(paginator_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    empty_page_0 = module_3.purge()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 1
    var_0.next_page_number()


@pytest.mark.xfail(strict=True)
def test_case_22():
    empty_page_0 = module_0.EmptyPage()
    none_type_0 = None
    user_string_0 = module_1.UserString(none_type_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 1
    invalid_page_1 = module_0.InvalidPage(*var_1)
    assert (
        f"{type(invalid_page_1).__module__}.{type(invalid_page_1).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1.get_page(var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = var_1.start_index()
    assert var_2 == 0
    var_3 = module_2.getdoc(invalid_page_0)
    var_4 = var_1.__iter__()
    var_2.get_page(invalid_page_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = var_1.has_other_pages()
    assert var_2 is False
    var_3 = module_2.getdoc(user_string_0)
    var_4 = var_1.end_index()
    assert var_4 == 0
    var_4.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_25():
    empty_page_0 = module_2.currentframe()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isspace()
    var_1 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_1, allow_empty_first_page=var_1)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 62
    assert paginator_0.num_pages == 62
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_2 = paginator_0.get_page(paginator_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "paginator.Page"
    assert len(var_2) == 1
    invalid_page_1 = module_0.InvalidPage(*var_2)
    assert (
        f"{type(invalid_page_1).__module__}.{type(invalid_page_1).__qualname__}"
        == "paginator.InvalidPage"
    )
    invalid_page_2 = module_0.InvalidPage()
    var_3 = var_2.start_index()
    assert var_3 == 1
    var_3.__len__()


@pytest.mark.xfail(strict=True)
def test_case_26():
    var_0 = module_2.currentframe()
    user_string_0 = module_1.UserString(var_0)
    var_1 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_1, allow_empty_first_page=var_1)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 62
    assert paginator_0.num_pages == 62
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_2 = paginator_0.get_page(paginator_0)
    assert f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "paginator.Page"
    assert len(var_2) == 1
    invalid_page_1 = module_0.InvalidPage(*var_2)
    assert (
        f"{type(invalid_page_1).__module__}.{type(invalid_page_1).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_3 = module_2.getmodule(var_2, var_2)
    var_4 = var_2.end_index()
    assert var_4 == 1
    var_5 = paginator_0.get_elided_page_range()
    page_not_an_integer_0 = module_0.PageNotAnInteger(*var_5)
    var_6 = invalid_page_0.__repr__()
    assert (
        var_6
        == "InvalidPage(<Page 1 of 62>, <Page 2 of 62>, <Page 3 of 62>, <Page 4 of 62>, <Page 5 of 62>, <Page 6 of 62>, <Page 7 of 62>, <Page 8 of 62>, <Page 9 of 62>, <Page 10 of 62>, <Page 11 of 62>, <Page 12 of 62>, <Page 13 of 62>, <Page 14 of 62>, <Page 15 of 62>, <Page 16 of 62>, <Page 17 of 62>, <Page 18 of 62>, <Page 19 of 62>, <Page 20 of 62>, <Page 21 of 62>, <Page 22 of 62>, <Page 23 of 62>, <Page 24 of 62>, <Page 25 of 62>, <Page 26 of 62>, <Page 27 of 62>, <Page 28 of 62>, <Page 29 of 62>, <Page 30 of 62>, <Page 31 of 62>, <Page 32 of 62>, <Page 33 of 62>, <Page 34 of 62>, <Page 35 of 62>, <Page 36 of 62>, <Page 37 of 62>, <Page 38 of 62>, <Page 39 of 62>, <Page 40 of 62>, <Page 41 of 62>, <Page 42 of 62>, <Page 43 of 62>, <Page 44 of 62>, <Page 45 of 62>, <Page 46 of 62>, <Page 47 of 62>, <Page 48 of 62>, <Page 49 of 62>, <Page 50 of 62>, <Page 51 of 62>, <Page 52 of 62>, <Page 53 of 62>, <Page 54 of 62>, <Page 55 of 62>, <Page 56 of 62>, <Page 57 of 62>, <Page 58 of 62>, <Page 59 of 62>, <Page 60 of 62>, <Page 61 of 62>, <Page 62 of 62>)"
    )
    var_6.page(page_not_an_integer_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    empty_page_0 = module_0.EmptyPage()
    user_string_0 = module_1.UserString(empty_page_0)
    var_0 = user_string_0.isprintable()
    paginator_0 = module_0.Paginator(user_string_0, var_0, allow_empty_first_page=var_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_1 = paginator_0.get_page(paginator_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "paginator.Page"
    assert len(var_1) == 0
    var_2 = paginator_0.get_page(paginator_0)
    invalid_page_1 = module_0.InvalidPage(*var_2)
    assert (
        f"{type(invalid_page_1).__module__}.{type(invalid_page_1).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_3 = var_1.start_index()
    assert var_3 == 0
    var_4 = var_2.has_other_pages()
    assert var_4 is False
    var_5 = module_2.getmodule(var_4, var_2)
    var_6 = var_1.end_index()
    assert var_6 == 0
    var_7 = paginator_0.get_elided_page_range()
    page_not_an_integer_0 = module_0.PageNotAnInteger(*var_7)
    assert (
        f"{type(page_not_an_integer_0).__module__}.{type(page_not_an_integer_0).__qualname__}"
        == "paginator.PageNotAnInteger"
    )
    user_string_0.__float__()


@pytest.mark.xfail(strict=True)
def test_case_28():
    parameter_kind_0 = module_2._ParameterKind.VAR_KEYWORD
    user_string_0 = module_1.UserString(parameter_kind_0)
    paginator_0 = module_0.Paginator(
        user_string_0, parameter_kind_0, allow_empty_first_page=parameter_kind_0
    )
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    invalid_page_0 = module_0.InvalidPage(*paginator_0)
    assert paginator_0.count == 11
    assert paginator_0.num_pages == 3
    assert (
        f"{type(invalid_page_0).__module__}.{type(invalid_page_0).__qualname__}"
        == "paginator.InvalidPage"
    )
    var_0 = paginator_0.get_page(parameter_kind_0)
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "paginator.Page"
    assert len(var_0) == 3
    unordered_object_list_warning_0 = module_0.UnorderedObjectListWarning(*var_0)
    assert (
        f"{type(unordered_object_list_warning_0).__module__}.{type(unordered_object_list_warning_0).__qualname__}"
        == "paginator.UnorderedObjectListWarning"
    )
    var_1 = user_string_0.count(user_string_0)
    invalid_page_1 = module_2.isfunction(var_0)
    var_2 = var_0.start_index()
    assert var_2 == 9
    var_3 = var_0.has_other_pages()
    assert var_3 is True
    var_1.most_common(invalid_page_1)
