# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import paginator_typed as module_0
import inspect as module_1
import collections as module_2
import ast as module_3


def test_case_0():
    bool_0 = True
    paginator_0 = module_0.Paginator(bool_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.Paginator(none_type_0, none_type_0)


def test_case_2():
    empty_page_0 = module_0.EmptyPage()


def test_case_3():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True
    paginator_0 = module_0.Paginator(page_0, bool_0)
    assert (
        f"{type(paginator_0).__module__}.{type(paginator_0).__qualname__}"
        == "paginator_typed.Paginator"
    )
    assert (
        f"{type(paginator_0.object_list).__module__}.{type(paginator_0.object_list).__qualname__}"
        == "paginator_typed.Page"
    )
    assert paginator_0.per_page == 1
    assert paginator_0.orphans == 0
    assert paginator_0.allow_empty_first_page is True
    assert (
        f"{type(paginator_0.error_messages).__module__}.{type(paginator_0.error_messages).__qualname__}"
        == "builtins.dict"
    )
    assert len(paginator_0.error_messages) == 3
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.page(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True
    page_0.has_other_pages()


@pytest.mark.xfail(strict=True)
def test_case_6():
    invalid_page_0 = module_0.InvalidPage()
    var_0 = module_1.isabstract(invalid_page_0)
    bool_0 = True
    page_0 = module_0.Page(var_0, bool_0, var_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is False
    assert page_0.number is True
    assert page_0.paginator is False
    page_1 = module_0.Page(var_0, bool_0, invalid_page_0)
    none_type_0 = None
    var_1 = module_1.formatannotation(none_type_0)
    module_0.Paginator(
        page_0, var_0, allow_empty_first_page=bool_0, error_messages=var_0
    )


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True
    page_0.next_page_number()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    paginator_0 = module_0.Paginator(bool_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(paginator_0)


def test_case_9():
    bool_0 = True
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0


def test_case_10():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.formatannotation(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 1


def test_case_11():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    var_1 = page_0.__contains__(paginator_0)
    assert var_1 is False


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.formatannotation(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 1
    var_1 = page_0.__contains__(paginator_0)
    assert var_1 is False
    paginator_0.page(page_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True
    none_type_0 = None
    page_0.__getitem__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    var_1 = module_3.NamedExpr()
    str_0 = page_0.__repr__()
    assert str_0 == "<Page 1 of 1>"
    paginator_0.page(page_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    generator_0 = var_0.__iter__()
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    page_0.previous_page_number()


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.formatannotation(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 1
    var_1 = var_0.format_map(var_0)
    int_0 = page_0.end_index()
    assert int_0 == 1
    var_1.previous_page_number()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = False
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is False
    assert page_0.number is False
    assert page_0.paginator is False
    bool_1 = page_0.has_previous()
    assert bool_1 is False
    none_type_0 = None
    var_0 = module_3.Eq()
    bool_2 = True
    paginator_0 = module_0.Paginator(page_0, bool_0, bool_2, none_type_0)
    assert (
        f"{type(paginator_0).__module__}.{type(paginator_0).__qualname__}"
        == "paginator_typed.Paginator"
    )
    assert (
        f"{type(paginator_0.object_list).__module__}.{type(paginator_0.object_list).__qualname__}"
        == "paginator_typed.Page"
    )
    assert paginator_0.per_page == 0
    assert paginator_0.orphans == 1
    assert paginator_0.allow_empty_first_page is None
    assert (
        f"{type(paginator_0.error_messages).__module__}.{type(paginator_0.error_messages).__qualname__}"
        == "builtins.dict"
    )
    assert len(paginator_0.error_messages) == 3
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(bool_2)


def test_case_19():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.formatannotation(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 4
    assert paginator_0.num_pages == 4
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 1
    int_0 = page_0.start_index()
    assert int_0 == 1
    empty_page_0 = module_0.EmptyPage()


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, allow_empty_first_page=bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    paginator_0.get_page(paginator_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    page_0 = module_0.Page(bool_0, bool_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert page_0.object_list is True
    assert page_0.number is True
    assert page_0.paginator is True
    none_type_0 = None
    paginator_0 = module_0.Paginator(page_0, bool_0)
    assert (
        f"{type(paginator_0).__module__}.{type(paginator_0).__qualname__}"
        == "paginator_typed.Paginator"
    )
    assert (
        f"{type(paginator_0.object_list).__module__}.{type(paginator_0.object_list).__qualname__}"
        == "paginator_typed.Page"
    )
    assert paginator_0.per_page == 1
    assert paginator_0.orphans == 0
    assert paginator_0.allow_empty_first_page is True
    assert (
        f"{type(paginator_0.error_messages).__module__}.{type(paginator_0.error_messages).__qualname__}"
        == "builtins.dict"
    )
    assert len(paginator_0.error_messages) == 3
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.formatannotation(none_type_0)
    float_0 = 1399.765
    paginator_0.page(float_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bool_0 = True
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    int_0 = page_0.end_index()
    assert int_0 == 0
    none_type_0 = None
    var_0 = module_1.isabstract(none_type_0)
    page_1 = paginator_0.page(bool_0)
    page_2 = paginator_0.get_page(page_1)
    assert (
        f"{type(page_2).__module__}.{type(page_2).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_2) == 0
    generator_0 = paginator_0.get_elided_page_range(on_each_side=var_0, on_ends=var_0)
    var_1 = user_list_0.__iadd__(generator_0)
    assert len(user_list_0) == 1
    assert len(paginator_0.object_list) == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "collections.UserList"
    )
    assert len(var_1) == 1
    var_0.page(page_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    named_expr_0 = module_3.NamedExpr()
    int_0 = page_0.start_index()
    assert int_0 == 0
    paginator_0.page(int_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bool_0 = False
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    var_0.extend(paginator_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_not_an_integer_0 = module_0.PageNotAnInteger(*paginator_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_not_an_integer_0).__module__}.{type(page_not_an_integer_0).__qualname__}"
        == "paginator_typed.PageNotAnInteger"
    )
    int_0 = -125
    module_0.Paginator(var_0, int_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_26():
    bool_0 = True
    none_type_0 = None
    var_0 = module_1.getouterframes(none_type_0)
    paginator_0 = module_0.Paginator(var_0, bool_0)
    assert paginator_0.orphans == 0
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    float_0 = 2669.0
    paginator_0.page(float_0)


def test_case_27():
    bool_0 = True
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = module_1.isabstract(none_type_0)
    generator_0 = paginator_0.get_elided_page_range(on_each_side=var_0, on_ends=var_0)
    var_1 = user_list_0.__iadd__(generator_0)
    assert len(user_list_0) == 1
    assert len(paginator_0.object_list) == 1
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "collections.UserList"
    )
    assert len(var_1) == 1
    var_2 = var_1.__contains__(bool_0)
    assert var_2 is True


@pytest.mark.xfail(strict=True)
def test_case_28():
    bool_0 = True
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    page_0 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_0) == 0
    none_type_0 = None
    page_1 = paginator_0.page(bool_0)
    page_2 = paginator_0.get_page(page_1)
    assert (
        f"{type(page_2).__module__}.{type(page_2).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_2) == 0
    generator_0 = paginator_0.get_elided_page_range(on_each_side=bool_0, on_ends=bool_0)
    var_0 = user_list_0.__iadd__(generator_0)
    assert len(user_list_0) == 1
    assert len(paginator_0.object_list) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "collections.UserList"
    )
    assert len(var_0) == 1
    module_3.parse(page_0, feature_version=none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    bool_0 = True
    user_list_0 = module_2.UserList()
    paginator_0 = module_0.Paginator(user_list_0, bool_0, bool_0)
    assert (
        f"{type(module_0.Paginator.count).__module__}.{type(module_0.Paginator.count).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.count.name == "count"
    assert (
        f"{type(module_0.Paginator.num_pages).__module__}.{type(module_0.Paginator.num_pages).__qualname__}"
        == "django.utils.functional.cached_property"
    )
    assert module_0.Paginator.num_pages.name == "num_pages"
    assert (
        f"{type(module_0.Paginator.page_range).__module__}.{type(module_0.Paginator.page_range).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.ismethod(bool_0)
    page_0 = module_0.Page(paginator_0, var_0, bool_0)
    assert (
        f"{type(page_0).__module__}.{type(page_0).__qualname__}"
        == "paginator_typed.Page"
    )
    assert (
        f"{type(page_0.object_list).__module__}.{type(page_0.object_list).__qualname__}"
        == "paginator_typed.Paginator"
    )
    assert page_0.number is False
    assert page_0.paginator is True
    page_1 = paginator_0.page(bool_0)
    assert paginator_0.count == 0
    assert paginator_0.num_pages == 1
    assert (
        f"{type(page_1).__module__}.{type(page_1).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_1) == 0
    int_0 = page_1.end_index()
    assert int_0 == 0
    page_2 = paginator_0.page(bool_0)
    int_1 = -540
    page_3 = paginator_0.get_page(page_2)
    assert (
        f"{type(page_3).__module__}.{type(page_3).__qualname__}"
        == "paginator_typed.Page"
    )
    assert len(page_3) == 0
    var_1 = page_3.__iter__()
    generator_0 = paginator_0.get_elided_page_range(on_each_side=int_1, on_ends=int_1)
    var_2 = user_list_0.__iadd__(generator_0)
    assert len(user_list_0) == 2
    assert len(paginator_0.object_list) == 2
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}" == "collections.UserList"
    )
    assert len(var_2) == 2
    bool_1 = page_3.has_other_pages()
    assert bool_1 is False
    int_0.page(page_1)
