# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import datastructures_typed as module_0


def test_case_0():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    ordered_set_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    module_0.MultiValueDict()


@pytest.mark.xfail(strict=True)
def test_case_3():
    dict_0 = {}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    str_0 = "\n    Change every non-whitespace character to the given char.\n    Used in the templatize function.\n    "
    multi_value_dict_0.__getitem__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "jyf$!\\\x0c5P~>3w6"
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_0 = multi_value_dict_0.setlist(str_0, multi_value_dict_0)
    var_0 = multi_value_dict_0.get(str_0)
    list_0 = [str_0]
    multi_value_dict_0.update(*list_0)


def test_case_5():
    str_0 = "Q:pcT,"
    str_1 = 'ora?"k8}8-\r'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_1}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 2
    var_0 = multi_value_dict_0.get(str_1)
    assert var_0 == "\r"


def test_case_6():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_0 = multi_value_dict_0.update(*multi_value_dict_0)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1


def test_case_7():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_0 is True
    ordered_set_1 = module_0.OrderedSet(case_insensitive_mapping_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "7%U}F,"
    str_1 = "\n    Return a translation object in the default 'django' domain.\n    "
    dict_0 = {str_0: str_0, str_1: str_1}
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 2
    int_0 = case_insensitive_mapping_0.__len__()
    var_0 = case_insensitive_mapping_0.keys()
    str_2 = var_0.__repr__()
    assert (
        str_2
        == "KeysView({'7%U}F,': '7%U}F,', \"\\n    Return a translation object in the default 'django' domain.\\n    \": \"\\n    Return a translation object in the default 'django' domain.\\n    \"})"
    )
    var_1 = case_insensitive_mapping_0.values()
    var_1.items()


@pytest.mark.xfail(strict=True)
def test_case_9():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    str_1 = ordered_set_0.__repr__()
    assert str_1 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_0 is True
    str_2 = case_insensitive_mapping_0.__repr__()
    assert str_2 == "{}"
    var_0.lists()


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    module_0.CaseInsensitiveMapping(none_type_0)


def test_case_11():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    bool_1 = ordered_set_0.__bool__()
    bool_2 = ordered_set_0.__bool__()


@pytest.mark.xfail(strict=True)
def test_case_12():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    bool_0 = ordered_set_0.__bool__()
    list_0 = multi_value_dict_0.getlist(str_0, dict_0)
    none_type_0 = multi_value_dict_0.update()
    multi_value_dict_1 = multi_value_dict_0.__copy__()
    assert len(multi_value_dict_1) == 1
    none_type_1 = ordered_set_0.discard(none_type_0)
    module_0.CaseInsensitiveMapping(str_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    none_type_1 = ordered_set_0.remove(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.keys()
    dict_wrapper_0 = module_0.DictWrapper(var_0, ordered_set_0, none_type_1)
    assert (
        f"{type(dict_wrapper_0).__module__}.{type(dict_wrapper_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(dict_wrapper_0) == 0
    bool_1 = ordered_set_0.__contains__(none_type_1)
    assert bool_1 is False
    var_0.__getitem__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    module_0.MultiValueDict()


def test_case_15():
    immutable_list_0 = module_0.ImmutableList()
    assert (
        f"{type(immutable_list_0).__module__}.{type(immutable_list_0).__qualname__}"
        == "datastructures_typed.ImmutableList"
    )
    assert len(immutable_list_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    list_0 = [none_type_0]
    list_1 = []
    immutable_list_0 = module_0.ImmutableList(*list_1)
    assert (
        f"{type(immutable_list_0).__module__}.{type(immutable_list_0).__qualname__}"
        == "datastructures_typed.ImmutableList"
    )
    assert len(immutable_list_0) == 0
    immutable_list_0.complain(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = 'KU!NJK-.W"Rp+kUSu"'
    dict_0 = {str_0: str_0}
    str_1 = "iIk5m6yuU!9ie[B%\rO"
    dict_wrapper_0 = module_0.DictWrapper(dict_0, str_0, str_1)
    assert (
        f"{type(dict_wrapper_0).__module__}.{type(dict_wrapper_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(dict_wrapper_0) == 1
    var_0 = dict_wrapper_0.__getitem__(str_0)
    assert var_0 == 'KU!NJK-.W"Rp+kUSu"'
    module_0.MultiValueDictKeyError(**dict_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "#B/\x0bUZ,M!j$zGa"
    module_0.CaseInsensitiveMapping(str_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    module_0.CaseInsensitiveMapping(ordered_set_0)


def test_case_20():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    iterator_0 = ordered_set_0.__reversed__()


@pytest.mark.xfail(strict=True)
def test_case_21():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    none_type_1 = ordered_set_0.remove(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    none_type_2 = None
    none_type_3 = ordered_set_0.discard(none_type_2)
    iterator_0 = ordered_set_0.__iter__()
    bool_1 = ordered_set_0.__contains__(none_type_1)
    assert bool_1 is False
    case_insensitive_mapping_0.__getitem__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    none_type_1 = ordered_set_0.remove(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    str_1 = ordered_set_0.__repr__()
    assert str_1 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    ordered_set_0.discard(case_insensitive_mapping_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    none_type_1 = ordered_set_0.remove(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    iterator_0 = ordered_set_0.__iter__()
    iterator_1 = ordered_set_0.__iter__()
    var_0 = case_insensitive_mapping_0.__eq__(str_0)
    assert var_0 is False
    case_insensitive_mapping_0.__getitem__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.add(ordered_set_0)
    none_type_1 = ordered_set_0.remove(ordered_set_0)
    bool_0 = ordered_set_0.__bool__()
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    str_1 = ordered_set_0.__repr__()
    assert str_1 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    none_type_2 = None
    none_type_3 = ordered_set_0.discard(none_type_2)
    var_0 = case_insensitive_mapping_0.keys()
    case_insensitive_mapping_1 = case_insensitive_mapping_0.copy()
    dict_wrapper_0 = module_0.DictWrapper(var_0, ordered_set_0, none_type_1)
    assert (
        f"{type(dict_wrapper_0).__module__}.{type(dict_wrapper_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(dict_wrapper_0) == 0
    iterator_0 = ordered_set_0.__iter__()
    iterator_1 = ordered_set_0.__iter__()
    case_insensitive_mapping_2 = module_0.CaseInsensitiveMapping(ordered_set_0)
    case_insensitive_mapping_0.__getitem__(iterator_1)


def test_case_25():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = '9ra?"^8i8:-\r'
    multi_value_dict_0 = module_0.MultiValueDict(ordered_set_0)
    var_0 = module_0.OrderedSet()
    list_0 = [multi_value_dict_0]
    none_type_0 = multi_value_dict_0.update(*list_0)
    var_1 = multi_value_dict_0.setdefault(str_0)
    assert len(multi_value_dict_0) == 1


def test_case_26():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_0 = multi_value_dict_0.update(*multi_value_dict_0)
    multi_value_dict_1 = multi_value_dict_0.__copy__()
    assert len(multi_value_dict_1) == 1


@pytest.mark.xfail(strict=True)
def test_case_27():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_0 is True
    module_0.OrderedSet(var_0)


def test_case_28():
    set_0 = set()
    multi_value_dict_0 = module_0.MultiValueDict(set_0)
    iterator_0 = multi_value_dict_0.lists()
    dict_0 = multi_value_dict_0.__getstate__()


def test_case_29():
    str_0 = ":pcT,"
    str_1 = 'ora?"k8}8-\r'
    dict_0 = {str_1: str_1, str_0: str_0, str_0: str_0, str_0: str_1, str_1: str_1}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 2
    var_0 = multi_value_dict_0.setdefault(str_0)
    assert var_0 == "\r"


@pytest.mark.xfail(strict=True)
def test_case_30():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = None
    ordered_set_1 = module_0.OrderedSet(none_type_0)
    str_0 = "\r"
    str_1 = ordered_set_1.__repr__()
    assert str_1 == "OrderedSet()"
    dict_0 = {str_0: ordered_set_0, str_0: none_type_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.copy()


@pytest.mark.xfail(strict=True)
def test_case_31():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    int_0 = ordered_set_0.__len__()
    var_0 = multi_value_dict_0.get(str_0)
    assert var_0 == ")"
    iterator_0 = var_0.__iter__()
    iterator_1 = var_0.__iter__()
    var_1 = var_0.__contains__(var_0)
    multi_value_dict_0.get(dict_0, ordered_set_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.update(**multi_value_dict_0)


def test_case_33():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = multi_value_dict_0.setlistdefault(str_0, str_0)
    assert list_0 == "OrderedSet()"
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_34():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    int_0 = ordered_set_0.__len__()
    var_0 = multi_value_dict_0.get(str_0)
    assert var_0 == ")"
    iterator_0 = var_0.__iter__()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    iterator_1 = var_0.__iter__()
    case_insensitive_mapping_1 = module_0.CaseInsensitiveMapping(ordered_set_0)
    var_1 = multi_value_dict_0.get(iterator_1)
    var_2 = case_insensitive_mapping_1.__eq__(dict_0)
    assert var_2 is False
    iterator_2 = case_insensitive_mapping_0.__iter__()
    module_0.CaseInsensitiveMapping(var_2)


def test_case_35():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    bool_0 = ordered_set_0.__bool__()
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = multi_value_dict_0.getlist(str_0, dict_0)
    none_type_0 = multi_value_dict_0.update()
    dict_1 = multi_value_dict_0.__getstate__()
    ordered_set_1 = module_0.OrderedSet(none_type_0)
    int_0 = ordered_set_1.__len__()


def test_case_36():
    str_0 = '9ra?"^8i8:-\r'
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    str_1 = ";e!"
    int_0 = -2785
    dict_1 = {str_1: int_0}
    none_type_0 = multi_value_dict_0.update(**dict_1)
    assert len(multi_value_dict_0) == 2
    var_0 = multi_value_dict_0.setdefault(str_1, dict_1)
    assert var_0 == -2785


def test_case_37():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_0 = multi_value_dict_0.update(*multi_value_dict_0)


def test_case_38():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = multi_value_dict_0.setlistdefault(str_0, str_0)
    assert list_0 == "OrderedSet()"
    str_1 = multi_value_dict_0.__repr__()
    assert str_1 == "<MultiValueDict: {'OrderedSet()': 'OrderedSet()'}>"
    dict_1 = multi_value_dict_0.__getstate__()
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_39():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.discard(ordered_set_0)
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_1 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    iterator_1 = multi_value_dict_0.items()
    dict_2 = multi_value_dict_0.dict()
    multi_value_dict_0.update(*ordered_set_0)


def test_case_40():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = module_0.DictWrapper(ordered_set_0, str_0, str_0)
    assert (
        f"{type(dict_0).__module__}.{type(dict_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(dict_0) == 0
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    var_0 = multi_value_dict_0.get(ordered_set_0, dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(var_0) == 0
    list_0 = multi_value_dict_0.setlistdefault(str_0, str_0)
    assert list_0 == "OrderedSet()"
    assert len(multi_value_dict_0) == 1
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = '9ra?"^8i8:-\r'
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    multi_value_dict_0.update(*dict_0)


def test_case_42():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = multi_value_dict_0.getlist(str_0, dict_0)
    none_type_0 = multi_value_dict_0.update()
    multi_value_dict_1 = multi_value_dict_0.__copy__()
    assert len(multi_value_dict_1) == 1
    ordered_set_1 = module_0.OrderedSet(ordered_set_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    var_0 = multi_value_dict_0.get(str_0, dict_0)
    none_type_0 = multi_value_dict_0.update(*var_0)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(str_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    multi_value_dict_0.getlist(case_insensitive_mapping_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = module_0.MultiValueDict(ordered_set_0)
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    list_0 = multi_value_dict_0.getlist(str_0, dict_0)
    assert (
        f"{type(list_0).__module__}.{type(list_0).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    assert len(list_0) == 0
    none_type_0 = multi_value_dict_0.update()
    multi_value_dict_1 = multi_value_dict_0.setdefault(str_0)
    assert len(multi_value_dict_0) == 1
    none_type_1 = multi_value_dict_0.update()
    multi_value_dict_2 = multi_value_dict_0.__copy__()
    assert (
        f"{type(multi_value_dict_2).__module__}.{type(multi_value_dict_2).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    assert len(multi_value_dict_2) == 1
    multi_value_dict_0.get(multi_value_dict_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_0 = multi_value_dict_0.__getitem__(str_0)
    var_0 = multi_value_dict_0.values()
    var_1 = var_0.__iter__()
    multi_value_dict_0.update(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_46():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    bool_0 = ordered_set_0.__bool__()
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = multi_value_dict_0.getlist(str_0, dict_0)
    str_1 = "C?)L/c?"
    list_1 = multi_value_dict_0.getlist(str_1)
    none_type_0 = multi_value_dict_0.update()
    multi_value_dict_1 = multi_value_dict_0.copy()
    assert (
        f"{type(multi_value_dict_1).__module__}.{type(multi_value_dict_1).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    assert len(multi_value_dict_1) == 1
    dict_1 = multi_value_dict_1.__getstate__()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(list_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.values()
    var_0.__getitem__(list_0)


@pytest.mark.xfail(strict=True)
def test_case_47():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    none_type_1 = multi_value_dict_0.__setstate__(dict_0)
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    iterator_0 = ordered_set_0.__reversed__()
    none_type_2 = multi_value_dict_0.update()
    var_0 = multi_value_dict_0.get(str_0)
    assert var_0 == ")"
    var_1 = var_0.__contains__(str_0)
    assert var_1 is False
    module_0.CaseInsensitiveMapping(str_0)


@pytest.mark.xfail(strict=True)
def test_case_48():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    none_type_1 = multi_value_dict_0.update()
    none_type_2 = None
    none_type_3 = multi_value_dict_0.appendlist(iterator_0, none_type_2)
    assert len(multi_value_dict_0) == 2
    var_0 = multi_value_dict_0.get(str_0)
    assert var_0 == ")"
    var_1 = var_0.__contains__(str_0)
    assert var_1 is False
    module_0.CaseInsensitiveMapping(str_0)


def test_case_49():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    var_0 = multi_value_dict_0.get(str_0, dict_0)
    none_type_0 = multi_value_dict_0.update(*var_0)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(str_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_50():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    var_0 = multi_value_dict_0.__getitem__(str_0)
    assert var_0 == ")"
    str_1 = var_0.__repr__()
    assert str_1 == "')'"
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    none_type_1 = multi_value_dict_0.setdefault(str_0, str_0)
    none_type_2 = ordered_set_0.add(none_type_1)
    multi_value_dict_1 = multi_value_dict_0.copy()
    assert (
        f"{type(multi_value_dict_1).__module__}.{type(multi_value_dict_1).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    var_1 = multi_value_dict_0.get(str_0)
    assert var_1 == ")"
    var_2 = var_1.__contains__(str_0)
    assert var_2 is False
    case_insensitive_mapping_0 = multi_value_dict_0.copy()
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    module_0.CaseInsensitiveMapping(ordered_set_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    iterator_1 = multi_value_dict_0.items()
    none_type_1 = multi_value_dict_0.update()
    str_1 = '1:9"F5([j95[\\\\'
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(iterator_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    case_insensitive_mapping_0.__getitem__(str_1)


@pytest.mark.xfail(strict=True)
def test_case_52():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    multi_value_dict_1 = multi_value_dict_0.__copy__()
    assert len(multi_value_dict_1) == 1
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(dict_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures_typed.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_0 = multi_value_dict_0.get(none_type_0, multi_value_dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datastructures_typed.MultiValueDict"
    )
    assert len(var_0) == 1
    var_1 = case_insensitive_mapping_0.__eq__(multi_value_dict_1)
    assert var_1 is False
    module_0.CaseInsensitiveMapping(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_53():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = ordered_set_0.__reversed__()
    iterator_1 = multi_value_dict_0.items()
    none_type_1 = multi_value_dict_0.update()
    none_type_2 = multi_value_dict_0.setdefault(none_type_0, iterator_1)
    assert len(multi_value_dict_0) == 2
    none_type_3 = multi_value_dict_0.__setstate__(dict_0)
    module_0.CaseInsensitiveMapping(iterator_1)


@pytest.mark.xfail(strict=True)
def test_case_54():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_0 = ordered_set_0.add(ordered_set_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_1 = multi_value_dict_0.__getstate__()
    iterator_0 = multi_value_dict_0.lists()
    iterator_1 = multi_value_dict_0.items()
    none_type_1 = multi_value_dict_0.update()
    str_1 = '1:9"F5([j95[\\\\'
    none_type_2 = multi_value_dict_0.__setstate__(dict_1)
    module_0.CaseInsensitiveMapping(str_1)


@pytest.mark.xfail(strict=True)
def test_case_55():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures_typed.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    none_type_0 = ordered_set_0.discard(ordered_set_0)
    str_0 = ordered_set_0.__repr__()
    assert str_0 == "OrderedSet()"
    none_type_1 = ordered_set_0.add(ordered_set_0)
    dict_0 = {
        none_type_0: none_type_0,
        str_0: str_0,
        str_0: str_0,
        str_0: none_type_1,
        none_type_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 2
    dict_1 = multi_value_dict_0.__getstate__()
    list_0 = multi_value_dict_0.getlist(str_0)
    bool_0 = ordered_set_0.__contains__(none_type_0)
    assert bool_0 is False
    iterator_0 = ordered_set_0.__reversed__()
    multi_value_dict_0.setdefault(str_0)


@pytest.mark.xfail(strict=True)
def test_case_56():
    str_0 = '9ra?"^8i8:-\r'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = [multi_value_dict_0]
    multi_value_dict_0.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_57():
    str_0 = ""
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    dict_wrapper_0 = module_0.DictWrapper(multi_value_dict_0, dict_0, str_0)
    assert (
        f"{type(dict_wrapper_0).__module__}.{type(dict_wrapper_0).__qualname__}"
        == "datastructures_typed.DictWrapper"
    )
    assert len(dict_wrapper_0) == 1
    dict_wrapper_0.__getitem__(str_0)


@pytest.mark.xfail(strict=True)
def test_case_58():
    str_0 = '9ra?"^8i8:-\r'
    dict_0 = {
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
        str_0: str_0,
    }
    multi_value_dict_0 = module_0.MultiValueDict(dict_0)
    assert len(multi_value_dict_0) == 1
    list_0 = [dict_0]
    multi_value_dict_0.update(*list_0)
