# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import feedgenerator as module_0
import http.cookiejar as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.rfc2822_date(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    module_0.rfc3339_date(none_type_0)


def test_case_2():
    none_type_0 = None
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_name=none_type_0,
        feed_guid=none_type_0,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"


def test_case_3():
    str_0 = "!e\x0c~|fAP#+k[vr"
    rss_feed_0 = module_0.RssFeed(str_0, str_0, str_0, categories=str_0)
    assert rss_feed_0.feed == {
        "title": "!e\x0c~|fAP#+k[vr",
        "link": "!e%0C~%7CfAP#+k[vr",
        "description": "!e\x0c~|fAP#+k[vr",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": [
            "!",
            "e",
            "\x0c",
            "~",
            "|",
            "f",
            "A",
            "P",
            "#",
            "+",
            "k",
            "[",
            "v",
            "r",
        ],
        "feed_url": None,
        "feed_copyright": None,
        "id": "!e\x0c~|fAP#+k[vr",
        "ttl": None,
    }
    assert module_0.RssFeed.content_type == "application/rss+xml; charset=utf-8"


def test_case_4():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        author_name=rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    var_1 = rss201rev2_feed_0.write(var_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    syndication_feed_0.writeString(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        author_name=rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    var_1 = rss201rev2_feed_0.add_item(
        var_0,
        var_0,
        rss201rev2_feed_0,
        none_type_0,
        comments=none_type_0,
        unique_id_is_permalink=var_0,
        ttl=var_0,
        enclosures=rss201rev2_feed_0,
    )
    rss201rev2_feed_0.writeString(none_type_0)


def test_case_7():
    none_type_0 = None
    enclosure_0 = module_0.Enclosure(none_type_0, none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.write(none_type_0, rss201rev2_feed_0)
    var_1 = rss201rev2_feed_0.rss_attributes()
    var_2 = var_0.__str__()
    module_0.get_tag_uri(var_2, var_2)


def test_case_9():
    none_type_0 = None
    var_0 = module_0.get_tag_uri(none_type_0, none_type_0)
    assert var_0 == "tag:None:b''/b''"


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    var_0 = syndication_feed_0.add_item_elements(syndication_feed_0, none_type_0)
    syndication_feed_0.writeString(none_type_0)


def test_case_11():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.write(none_type_0, rss201rev2_feed_0)


def test_case_12():
    none_type_0 = None
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_name=none_type_0,
        feed_guid=none_type_0,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    var_0 = atom1_feed_0.root_attributes()


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    syndication_feed_0.add_item(
        syndication_feed_0,
        syndication_feed_0,
        none_type_0,
        author_name=syndication_feed_0,
        author_link=none_type_0,
        unique_id_is_permalink=none_type_0,
        item_copyright=none_type_0,
        updateddate=syndication_feed_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_14():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    var_0 = syndication_feed_0.add_item(
        none_type_0,
        none_type_0,
        syndication_feed_0,
        author_name=none_type_0,
        pubdate=syndication_feed_0,
        unique_id=syndication_feed_0,
        unique_id_is_permalink=none_type_0,
        ttl=syndication_feed_0,
    )
    syndication_feed_0.add_item(
        syndication_feed_0,
        syndication_feed_0,
        none_type_0,
        author_name=syndication_feed_0,
        author_link=none_type_0,
        unique_id_is_permalink=none_type_0,
        item_copyright=none_type_0,
        updateddate=syndication_feed_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_15():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    var_0 = syndication_feed_0.num_items()
    syndication_feed_0.add_item(
        syndication_feed_0,
        syndication_feed_0,
        none_type_0,
        author_name=syndication_feed_0,
        author_link=none_type_0,
        unique_id_is_permalink=none_type_0,
        item_copyright=none_type_0,
        updateddate=syndication_feed_0,
    )


@pytest.mark.xfail(strict=True)
def test_case_16():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.write(none_type_0, rss201rev2_feed_0)
    var_1 = rss201rev2_feed_0.write_items(none_type_0)
    var_2 = rss201rev2_feed_0.write(none_type_0, var_1)
    rss_feed_0 = module_0.RssFeed(
        var_2, var_1, var_0, var_1, none_type_0, feed_guid=rss201rev2_feed_0
    )
    assert module_0.RssFeed.content_type == "application/rss+xml; charset=utf-8"
    load_error_0 = module_1.LoadError()
    rss201rev2_feed_0.add_item(
        var_1, var_0, load_error_0, author_link=rss201rev2_feed_0, unique_id=var_2
    )


def test_case_17():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.latest_post_date()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "datetime.datetime"
    var_1 = module_0.rfc3339_date(var_0)
    var_2 = rss201rev2_feed_0.add_item(
        var_1,
        var_1,
        var_0,
        comments=rss201rev2_feed_0,
        unique_id=var_1,
        unique_id_is_permalink=var_0,
        categories=var_1,
        ttl=none_type_0,
    )


def test_case_18():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        none_type_0,
        none_type_0,
        rss201rev2_feed_0,
        none_type_0,
        unique_id=rss201rev2_feed_0,
        item_copyright=none_type_0,
        ttl=rss201rev2_feed_0,
        enclosures=none_type_0,
    )
    var_1 = rss201rev2_feed_0.write(var_0, none_type_0)


def test_case_19():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_email=none_type_0,
        subtitle=none_type_0,
        categories=none_type_0,
    )
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        none_type_0,
        none_type_0,
        none_type_0,
        unique_id=rss201rev2_feed_0,
        unique_id_is_permalink=rss201rev2_feed_0,
        enclosures=none_type_0,
    )
    var_1 = rss201rev2_feed_0.write(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        author_name=rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    var_1 = rss201rev2_feed_0.add_item(
        var_0,
        var_0,
        rss201rev2_feed_0,
        none_type_0,
        comments=none_type_0,
        unique_id_is_permalink=var_0,
        ttl=var_0,
        enclosures=rss201rev2_feed_0,
    )
    rss201rev2_feed_0.write(var_1, var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        author_name=rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    var_1 = rss201rev2_feed_0.add_item(
        var_0,
        var_0,
        rss201rev2_feed_0,
        rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=none_type_0,
        unique_id_is_permalink=var_0,
        ttl=var_0,
        enclosures=rss201rev2_feed_0,
    )
    rss201rev2_feed_0.write(var_1, var_0)


def test_case_22():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.latest_post_date()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "datetime.datetime"
    var_1 = module_0.rfc3339_date(var_0)
    var_2 = rss201rev2_feed_0.add_item(
        var_1,
        var_1,
        var_0,
        comments=var_1,
        unique_id=var_1,
        unique_id_is_permalink=var_0,
        categories=var_1,
        ttl=none_type_0,
    )
    var_3 = rss201rev2_feed_0.write(var_2, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        none_type_0,
        none_type_0,
        none_type_0,
        comments=rss201rev2_feed_0,
        item_copyright=none_type_0,
        updateddate=rss201rev2_feed_0,
        enclosures=none_type_0,
    )
    rss201rev2_feed_0.write(var_0, rss201rev2_feed_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_link=none_type_0,
        categories=none_type_0,
        feed_copyright=none_type_0,
    )
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        none_type_0,
        none_type_0,
        rss201rev2_feed_0,
        rss201rev2_feed_0,
        pubdate=rss201rev2_feed_0,
        comments=rss201rev2_feed_0,
        item_copyright=none_type_0,
        ttl=none_type_0,
        updateddate=rss201rev2_feed_0,
    )
    rss201rev2_feed_0.write(var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        rss201rev2_feed_0,
        rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    var_1 = rss201rev2_feed_0.write(var_0, rss201rev2_feed_0)
    module_0.rfc3339_date(var_1)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_name=none_type_0,
        feed_guid=none_type_0,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    atom1_feed_0.write(atom1_feed_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        none_type_0,
        author_name=rss201rev2_feed_0,
        comments=none_type_0,
        unique_id=rss201rev2_feed_0,
        categories=none_type_0,
    )
    bool_0 = False
    var_1 = rss201rev2_feed_0.add_item(
        bool_0,
        none_type_0,
        bool_0,
        author_link=var_0,
        pubdate=bool_0,
        comments=var_0,
        unique_id=none_type_0,
        updateddate=bool_0,
        enclosures=rss201rev2_feed_0,
    )
    rss201rev2_feed_0.write(var_0, rss201rev2_feed_0)


def test_case_28():
    none_type_0 = None
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(none_type_0, none_type_0, none_type_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    var_0 = rss201rev2_feed_0.latest_post_date()
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "datetime.datetime"
    var_1 = module_0.rfc3339_date(var_0)


def test_case_29():
    none_type_0 = None
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0,
        none_type_0,
        none_type_0,
        author_name=none_type_0,
        feed_guid=none_type_0,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    var_0 = atom1_feed_0.write_items(atom1_feed_0)
    var_1 = atom1_feed_0.root_attributes()


@pytest.mark.xfail(strict=True)
def test_case_30():
    none_type_0 = None
    syndication_feed_0 = module_0.SyndicationFeed(
        none_type_0, none_type_0, none_type_0, author_email=none_type_0
    )
    assert (
        f"{type(syndication_feed_0).__module__}.{type(syndication_feed_0).__qualname__}"
        == "feedgenerator.SyndicationFeed"
    )
    assert syndication_feed_0.feed == {
        "title": None,
        "link": None,
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": None,
        "ttl": None,
    }
    assert syndication_feed_0.items == []
    var_0 = syndication_feed_0.add_root_elements(none_type_0)
    var_1 = syndication_feed_0.num_items()
    var_2 = syndication_feed_0.num_items()
    syndication_feed_0.add_item(
        syndication_feed_0,
        syndication_feed_0,
        none_type_0,
        author_name=syndication_feed_0,
        author_link=none_type_0,
        unique_id_is_permalink=none_type_0,
        item_copyright=none_type_0,
        updateddate=syndication_feed_0,
    )
