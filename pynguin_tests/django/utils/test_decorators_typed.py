# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import decorators_typed as module_1


def test_case_0():
    type_0 = module_0.bool
    callable_0 = module_1.method_decorator(type_0)


def test_case_1():
    int_0 = -1783
    callable_0 = module_1.method_decorator(int_0)


def test_case_2():
    type_0 = module_0.set
    callable_0 = module_1.make_middleware_decorator(type_0)
    callable_1 = module_1.decorator_from_middleware(type_0)
    callable_2 = module_1.method_decorator(type_0)
    callable_3 = module_1.decorator_from_middleware_with_args(type_0)
    callable_4 = module_1.decorator_from_middleware(type_0)
    list_0 = [callable_0]
    classonlymethod_0 = module_1.classonlymethod(*list_0)
    assert module_1.classonlymethod.sync_capable is False
    assert module_1.classonlymethod.async_capable is True
    with pytest.raises(AttributeError):
        classonlymethod_0.__get__(callable_3)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_1.classonlymethod()


def test_case_4():
    type_0 = module_0.list
    callable_0 = module_1.decorator_from_middleware_with_args(type_0)


def test_case_5():
    type_0 = module_0.bool
    callable_0 = module_1.decorator_from_middleware(type_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    type_0 = module_0.bytes
    module_1.sync_and_async_middleware(type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_1.sync_only_middleware(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 2926
    module_1.async_only_middleware(int_0)


def test_case_9():
    type_0 = module_0.set
    callable_0 = module_1.make_middleware_decorator(type_0)
    callable_1 = module_1.decorator_from_middleware_with_args(type_0)
    callable_2 = module_1.async_only_middleware(callable_1)
    callable_3 = module_1.decorator_from_middleware(type_0)
    list_0 = [callable_0]
    classonlymethod_0 = module_1.classonlymethod(*list_0)
    assert module_1.classonlymethod.sync_capable is False
    assert module_1.classonlymethod.async_capable is True
    with pytest.raises(AttributeError):
        classonlymethod_0.__get__(callable_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    int_0 = -1745
    none_type_0 = None
    list_0 = [int_0]
    classonlymethod_0 = module_1.classonlymethod(*list_0)
    assert module_1.classonlymethod.sync_capable is False
    assert module_1.classonlymethod.async_capable is True
    classonlymethod_0.__get__(none_type_0)
