# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tree_typed as module_0
import django.utils.hashable as module_1


def test_case_0():
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = node_0.__copy__()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "tree_typed.Node"
    assert len(node_1) == 0


def test_case_1():
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    str_0 = node_0.__repr__()
    assert str_0 == "<Node: (DEFAULT: )>"
    list_0 = [node_0]
    node_1 = module_0.Node(list_0, str_0)
    node_2 = node_1.add(node_0, str_0)
    assert len(node_1) == 2
    assert len(node_2) == 0


def test_case_2():
    bool_0 = True
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    tuple_0 = (bool_0, dict_0)
    node_0 = module_0.Node(negated=tuple_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    str_0 = node_0.__str__()
    assert str_0 == "(NOT (DEFAULT: ))"


def test_case_3():
    str_0 = ">_pv@+[\r7"
    node_0 = module_0.Node(connector=str_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    str_1 = "Q._KYzEP7DBD4v8]"
    none_type_0 = None
    node_1 = module_0.Node()
    node_2 = node_1.__deepcopy__(none_type_0)
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "tree_typed.Node"
    assert len(node_2) == 0
    int_0 = node_1.__len__()
    node_3 = node_2.__copy__()
    node_4 = node_3.add(str_1, str_1)
    assert len(node_3) == 2
    str_2 = node_3.__repr__()
    assert str_2 == "<Node: (Q._KYzEP7DBD4v8]: (DEFAULT: ), Q._KYzEP7DBD4v8])>"


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    bool_1 = node_0.__eq__(node_0)
    assert bool_1 is True
    node_0.__deepcopy__(bool_0)


def test_case_5():
    bool_0 = True
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = node_0.__copy__()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "tree_typed.Node"
    assert len(node_1) == 0
    var_0 = module_1.make_hashable(bool_0)
    bool_1 = node_1.__eq__(var_0)
    assert bool_1 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    none_type_0 = None
    str_0 = "-"
    node_0 = module_0.Node(connector=str_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = node_0.add(none_type_0, tuple_0)
    assert len(node_0) == 2
    var_0 = module_1.make_hashable(tuple_0)
    str_1 = var_0.__str__()
    var_0.__copy__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = node_0.__copy__()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "tree_typed.Node"
    assert len(node_1) == 0
    node_1.__deepcopy__(bool_0)


def test_case_8():
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = node_0.__copy__()
    assert f"{type(node_1).__module__}.{type(node_1).__qualname__}" == "tree_typed.Node"
    assert len(node_1) == 0
    node_2 = node_1.__copy__()
    var_0 = module_1.make_hashable(node_2)
    node_3 = module_0.Node(var_0)
    bool_0 = True
    node_4 = module_0.Node(negated=bool_0)
    str_0 = node_4.__repr__()
    assert str_0 == "<Node: (NOT (DEFAULT: ))>"


def test_case_9():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=tuple_0)
    str_0 = node_0.__repr__()
    assert str_0 == "<Node: (DEFAULT: )>"
    int_0 = node_0.__hash__()
    assert int_0 == -1015878742723653453
    bool_0 = node_1.__bool__()
    list_0 = [node_1]
    node_2 = module_0.Node(list_0, str_0)
    node_3 = node_2.add(node_1, str_0)
    assert len(node_2) == 2
    assert len(node_3) == 0
    int_1 = node_1.__len__()
    int_2 = node_1.__hash__()
    assert int_2 == -1015878742723653453
    bool_1 = node_3.__contains__(node_1)
    assert bool_1 is False
    str_1 = node_1.__repr__()
    assert str_1 == "<Node: (DEFAULT: )>"


def test_case_10():
    none_type_0 = None
    bool_0 = True
    node_0 = module_0.Node(none_type_0, negated=bool_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    int_0 = node_0.__hash__()
    assert int_0 == -5908952771696349819
    dict_0 = {}
    var_0 = module_1.make_hashable(dict_0)
    str_0 = var_0.__str__()
    node_1 = module_0.Node(negated=bool_0)
    str_1 = node_1.__str__()
    assert str_1 == "(NOT (DEFAULT: ))"
    none_type_1 = node_0.negate()
    node_2 = node_1.__copy__()
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "tree_typed.Node"
    assert len(node_2) == 0


@pytest.mark.xfail(strict=True)
def test_case_11():
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    bool_0 = False
    bool_1 = node_0.__bool__()
    node_1 = module_0.Node(negated=bool_0)
    node_2 = node_0.add(node_0, bool_0)
    assert len(node_0) == 2
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "tree_typed.Node"
    assert len(node_2) == 2
    none_type_0 = None
    node_3 = node_0.__deepcopy__(none_type_0)
    assert len(node_3) == 2
    none_type_1 = node_0.negate()
    int_0 = node_1.__hash__()
    assert int_0 == -1015878742723653453
    node_4 = node_2.__copy__()
    assert len(node_4) == 2
    node_3.__hash__()


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 870
    str_0 = "CEjn~]cjI"
    bool_0 = True
    node_0 = module_0.Node(negated=bool_0)
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=str_0, negated=bool_0)
    node_2 = node_1.add(int_0, str_0)
    assert node_2 == 870
    assert len(node_1) == 1
    bool_1 = False
    set_0 = {bool_1, bool_1, bool_1, bool_1}
    bool_2 = False
    module_0.Node(set_0, negated=bool_2)


@pytest.mark.xfail(strict=True)
def test_case_13():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=tuple_0)
    bool_0 = node_0.__eq__(tuple_0)
    assert bool_0 is False
    int_0 = node_0.__len__()
    list_0 = []
    str_0 = node_0.__str__()
    assert str_0 == "(DEFAULT: )"
    node_2 = module_0.Node(list_0)
    node_3 = node_0.__copy__()
    assert f"{type(node_3).__module__}.{type(node_3).__qualname__}" == "tree_typed.Node"
    assert len(node_3) == 0
    str_1 = node_3.__repr__()
    assert str_1 == "<Node: (DEFAULT: )>"
    bool_1 = node_3.__contains__(node_0)
    assert bool_1 is False
    str_2 = node_3.__repr__()
    assert str_2 == "<Node: (DEFAULT: )>"
    none_type_0 = node_3.negate()
    int_1 = node_0.__hash__()
    assert int_1 == -1015878742723653453
    bool_2 = node_0.__bool__()
    int_2 = node_3.__hash__()
    assert int_2 == -5908952771696349819
    node_4 = node_0.__copy__()
    int_3 = node_1.__hash__()
    assert int_3 == -1015878742723653453
    bool_3 = node_0.__contains__(none_type_0)
    assert bool_3 is False
    int_4 = node_4.__len__()
    node_5 = module_0.Node()
    node_6 = node_5.add(tuple_0, str_1)
    assert len(node_5) == 2
    bool_4 = node_5.__contains__(node_5)
    assert bool_4 is False
    node_2.__deepcopy__(node_1)


def test_case_14():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=tuple_0)
    bool_0 = node_0.__eq__(tuple_0)
    assert bool_0 is False
    int_0 = node_0.__len__()
    int_1 = node_0.__len__()
    str_0 = node_1.__str__()
    assert str_0 == "(DEFAULT: )"
    str_1 = "B6^Z!)5JE73_\x0c\r^. r^"
    node_2 = node_1.add(node_0, str_1)
    assert len(node_1) == 2
    assert f"{type(node_2).__module__}.{type(node_2).__qualname__}" == "tree_typed.Node"
    assert len(node_2) == 0
    node_3 = module_0.Node()
    str_2 = node_3.__repr__()
    assert str_2 == "<Node: (DEFAULT: )>"
    str_3 = node_3.__repr__()
    assert str_3 == "<Node: (DEFAULT: )>"
    int_2 = node_0.__len__()
    int_3 = node_2.__hash__()
    assert int_3 == -1015878742723653453
    bool_1 = node_1.__bool__()
    node_4 = module_0.Node()
    none_type_0 = node_2.negate()
    none_type_1 = node_1.negate()
    int_4 = node_0.__len__()
    node_5 = node_1.__copy__()
    assert len(node_5) == 2
    int_5 = node_1.__len__()
    assert int_5 == 2
    int_6 = node_1.__hash__()
    assert int_6 == 237952012669916552
    bool_2 = node_0.__contains__(bool_0)
    assert bool_2 is False
    bool_3 = node_0.__contains__(node_5)
    assert bool_3 is False
    var_0 = module_1.make_hashable(int_4)
    bool_4 = node_5.__contains__(var_0)
    assert bool_4 is False
    node_6 = module_0.Node(connector=var_0)
    bool_5 = node_0.__eq__(node_6)
    assert bool_5 is False
    str_4 = node_4.__str__()
    assert str_4 == "(DEFAULT: )"
    int_7 = node_1.__hash__()
    assert int_7 == 237952012669916552


def test_case_15():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=tuple_0)
    bool_0 = node_0.__eq__(tuple_0)
    assert bool_0 is False
    int_0 = node_0.__len__()
    list_0 = [node_1]
    str_0 = node_1.__str__()
    assert str_0 == "(DEFAULT: )"
    bool_1 = True
    node_2 = module_0.Node(list_0, negated=bool_1)
    node_3 = node_1.add(node_0, str_0)
    assert len(node_1) == 2
    assert f"{type(node_3).__module__}.{type(node_3).__qualname__}" == "tree_typed.Node"
    assert len(node_3) == 0
    str_1 = node_0.__repr__()
    assert str_1 == "<Node: (DEFAULT: )>"
    bool_2 = node_1.__contains__(node_1)
    assert bool_2 is False
    str_2 = node_0.__repr__()
    assert str_2 == "<Node: (DEFAULT: )>"
    none_type_0 = node_2.negate()
    int_1 = node_3.__hash__()
    assert int_1 == -1015878742723653453
    bool_3 = node_1.__bool__()
    str_3 = node_2.__repr__()
    assert str_3 == "<Node: (DEFAULT: ((DEFAULT: ): (DEFAULT: ), (DEFAULT: )))>"
    node_4 = module_0.Node()
    none_type_1 = node_3.negate()
    none_type_2 = node_1.negate()
    int_2 = node_0.__len__()
    list_1 = [node_1]
    node_5 = module_0.Node(list_1, str_1)
    node_6 = node_5.add(node_1, str_1)
    assert len(node_5) == 2
    assert len(node_6) == 2
    node_7 = node_1.__copy__()
    assert len(node_7) == 2
    int_3 = node_1.__len__()
    assert int_3 == 2
    int_4 = node_1.__hash__()
    assert int_4 == -816898715494833037
    bool_4 = node_0.__contains__(bool_0)
    assert bool_4 is False
    bool_5 = node_0.__contains__(node_7)
    assert bool_5 is False
    var_0 = module_1.make_hashable(int_2)
    bool_6 = node_7.__contains__(var_0)
    assert bool_6 is False
    bool_7 = node_4.__bool__()
    node_8 = node_4.add(var_0, str_3)
    assert len(node_4) == 2
    str_4 = node_3.__repr__()
    assert str_4 == "<Node: (NOT (DEFAULT: ))>"
    bool_8 = node_2.__contains__(str_1)
    assert bool_8 is False


@pytest.mark.xfail(strict=True)
def test_case_16():
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    int_0 = node_0.__len__()
    bool_0 = False
    bool_1 = node_0.__bool__()
    node_1 = node_0.add(bool_1, bool_1)
    assert node_1 is False
    assert len(node_0) == 2
    node_2 = node_0.add(node_0, bool_0)
    assert len(node_0) == 4
    assert len(node_2) == 4
    none_type_0 = None
    node_3 = node_0.__deepcopy__(none_type_0)
    assert len(node_3) == 4
    none_type_1 = node_0.negate()
    int_1 = node_1.__hash__()
    node_4 = node_3.__copy__()
    assert len(node_4) == 4
    int_2 = node_3.__hash__()
    assert int_2 == -4165794770195171825
    bool_2 = node_0.__contains__(bool_1)
    assert bool_2 is True
    str_0 = "2h_l6`G"
    int_3 = node_2.__len__()
    assert int_3 == 4
    node_5 = node_0.add(node_1, str_0)
    assert len(node_0) == 2
    assert len(node_2) == 2
    node_5.__contains__(node_5)


def test_case_17():
    tuple_0 = ()
    node_0 = module_0.Node()
    assert module_0.Node.default == "DEFAULT"
    assert (
        f"{type(module_0.Node.create).__module__}.{type(module_0.Node.create).__qualname__}"
        == "builtins.method"
    )
    node_1 = module_0.Node(connector=tuple_0)
    bool_0 = node_0.__eq__(tuple_0)
    assert bool_0 is False
    int_0 = node_0.__len__()
    list_0 = [node_1]
    str_0 = node_1.__str__()
    assert str_0 == "(DEFAULT: )"
    bool_1 = True
    node_2 = module_0.Node(list_0, negated=bool_1)
    node_3 = node_1.add(node_0, str_0)
    assert len(node_1) == 2
    assert f"{type(node_3).__module__}.{type(node_3).__qualname__}" == "tree_typed.Node"
    assert len(node_3) == 0
    str_1 = node_0.__repr__()
    assert str_1 == "<Node: (DEFAULT: )>"
    var_0 = module_1.make_hashable(str_1)
    assert var_0 == "<Node: (DEFAULT: )>"
    str_2 = node_0.__repr__()
    assert str_2 == "<Node: (DEFAULT: )>"
    none_type_0 = node_2.negate()
    int_1 = node_3.__hash__()
    assert int_1 == -1015878742723653453
    bool_2 = node_1.__bool__()
    str_3 = node_2.__repr__()
    assert str_3 == "<Node: (DEFAULT: ((DEFAULT: ): (DEFAULT: ), (DEFAULT: )))>"
    node_4 = module_0.Node()
    none_type_1 = node_3.negate()
    var_1 = module_1.make_hashable(list_0)
    int_2 = node_0.__len__()
    list_1 = [node_1]
    node_5 = module_0.Node(list_1, str_1)
    node_6 = node_5.add(node_2, str_1)
    assert len(node_6) == 2
    node_7 = node_1.__copy__()
    assert len(node_7) == 2
    int_3 = node_1.__len__()
    assert int_3 == 2
    int_4 = node_1.__hash__()
    assert int_4 == 8324144600116717669
    bool_3 = node_0.__contains__(bool_0)
    assert bool_3 is False
    bool_4 = node_0.__contains__(node_7)
    assert bool_4 is False
    var_2 = module_1.make_hashable(int_2)
    bool_5 = node_7.__contains__(var_2)
    assert bool_5 is False
    bool_6 = node_4.__bool__()
    node_8 = node_4.add(var_2, str_3)
    assert len(node_4) == 2
    str_4 = node_3.__repr__()
    assert str_4 == "<Node: (NOT (DEFAULT: ))>"
    bool_7 = node_2.__contains__(str_1)
    assert bool_7 is False
