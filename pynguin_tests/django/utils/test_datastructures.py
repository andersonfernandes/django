# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import datastructures as module_0
import builtins as module_1


def test_case_0():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_1():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.discard(ordered_set_0)
    var_0.copy()


@pytest.mark.xfail(strict=True)
def test_case_2():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    multi_value_dict_0 = module_0.MultiValueDict(ordered_set_0)
    multi_value_dict_1 = module_0.MultiValueDict()
    ordered_set_0.discard(multi_value_dict_1)


@pytest.mark.xfail(strict=True)
def test_case_3():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.__getstate__()
    multi_value_dict_1 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_1, str_0: multi_value_dict_1}
    var_1 = multi_value_dict_1.update(**dict_0)
    assert len(multi_value_dict_1) == 1
    var_2 = multi_value_dict_1.lists()
    var_3 = multi_value_dict_1.__getstate__()
    var_4 = multi_value_dict_1.copy()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_4) == 1
    var_5 = var_4.__setstate__(var_4)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(var_2)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_6 = dict_0.__repr__()
    assert (
        var_6
        == "{'q^s5B0J75TKvq\\\\c': <MultiValueDict: {'q^s5B0J75TKvq\\\\c': [<MultiValueDict: {...}>]}>}"
    )
    var_4.__getitem__(var_5)


@pytest.mark.xfail(strict=True)
def test_case_4():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0, str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.lists()
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = multi_value_dict_0.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_3) == 1
    var_4 = var_3.__setstate__(var_3)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(var_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_5 = var_3.dict()
    multi_value_dict_0.get(var_5, dict_0)


def test_case_5():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.values()
    var_1 = multi_value_dict_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )


def test_case_6():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.__getstate__()
    var_1 = var_0.__repr__()
    assert var_1 == "{'_data': {}}"


@pytest.mark.xfail(strict=True)
def test_case_7():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.__setstate__(multi_value_dict_0)
    var_1 = var_0.__eq__(multi_value_dict_0)
    multi_value_dict_0.setdefault(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B075Kvq\\c"
    dict_0 = {str_0: multi_value_dict_0, str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.lists()
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = multi_value_dict_0.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_3) == 1
    var_4 = multi_value_dict_0.getlist(str_0)
    multi_value_dict_0.__deepcopy__(multi_value_dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.getlist(
        multi_value_dict_key_error_0, multi_value_dict_key_error_0
    )
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datastructures.MultiValueDictKeyError"
    )
    var_0.__getitem__(multi_value_dict_key_error_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.values()
    var_1 = multi_value_dict_0.dict()
    var_2 = multi_value_dict_0.update(*var_0)
    none_type_0 = None
    var_3 = multi_value_dict_0.setdefault(none_type_0, var_0)
    assert len(multi_value_dict_0) == 1
    var_2.__len__()


def test_case_11():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_12():
    multi_value_dict_0 = module_0.MultiValueDict()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__repr__()
    assert var_0 == "{}"
    var_0.complain()


@pytest.mark.xfail(strict=True)
def test_case_13():
    none_type_0 = None
    module_0.CaseInsensitiveMapping(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.__len__()
    var_0.copy()


def test_case_15():
    multi_value_dict_0 = module_0.MultiValueDict()


def test_case_16():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.__getstate__()
    var_1 = multi_value_dict_0.__repr__()
    assert var_1 == "<MultiValueDict: {}>"


@pytest.mark.xfail(strict=True)
def test_case_17():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.copy()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    bool_0 = False
    multi_value_dict_0.__setitem__(multi_value_dict_0, bool_0)


def test_case_18():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.getlist(str_0)
    var_2 = multi_value_dict_0.appendlist(var_0, var_0)
    assert len(multi_value_dict_0) == 2


def test_case_19():
    str_0 = "=S$/lm)n/e\x0c\"q'dH!"
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.setlistdefault(str_0)
    assert len(multi_value_dict_0) == 1
    var_1 = var_0.__len__()
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_20():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = module_0.OrderedSet(multi_value_dict_0)
    var_1 = multi_value_dict_0.copy()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    var_2 = var_1.__setstate__(var_1)
    multi_value_dict_0.appendlist(var_1, multi_value_dict_0)


def test_case_21():
    immutable_list_0 = module_0.ImmutableList()
    assert (
        f"{type(immutable_list_0).__module__}.{type(immutable_list_0).__qualname__}"
        == "datastructures.ImmutableList"
    )
    assert len(immutable_list_0) == 0


@pytest.mark.xfail(strict=True)
def test_case_22():
    dict_0 = {}
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError(**dict_0)
    immutable_list_0 = module_0.ImmutableList(**dict_0)
    assert (
        f"{type(immutable_list_0).__module__}.{type(immutable_list_0).__qualname__}"
        == "datastructures.ImmutableList"
    )
    assert len(immutable_list_0) == 0
    immutable_list_0.complain()


@pytest.mark.xfail(strict=True)
def test_case_23():
    int_0 = 2311
    none_type_0 = None
    module_0.DictWrapper(int_0, none_type_0, int_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    case_insensitive_mapping_1 = module_0.CaseInsensitiveMapping(ordered_set_0)
    var_0 = case_insensitive_mapping_0.__len__()
    case_insensitive_mapping_0.get(var_0)


@pytest.mark.xfail(strict=True)
def test_case_25():
    multi_value_dict_0 = module_0.MultiValueDict()
    multi_value_dict_0.getlist(multi_value_dict_0)


def test_case_26():
    multi_value_dict_0 = module_0.MultiValueDict()
    list_0 = [multi_value_dict_0, multi_value_dict_0, multi_value_dict_0]
    with pytest.raises(TypeError):
        multi_value_dict_0.update(*list_0)


def test_case_27():
    multi_value_dict_0 = module_0.MultiValueDict()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_0 is True
    var_1 = multi_value_dict_0.__getstate__()
    var_2 = multi_value_dict_0.copy()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    var_3 = case_insensitive_mapping_0.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_28():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.__getstate__()
    multi_value_dict_1 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_1, str_0: multi_value_dict_1}
    var_1 = multi_value_dict_1.update(**dict_0)
    assert len(multi_value_dict_1) == 1
    var_2 = multi_value_dict_1.lists()
    var_3 = multi_value_dict_1.__getstate__()
    var_4 = multi_value_dict_1.copy()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_4) == 1
    var_5 = var_4.__setstate__(var_4)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(var_2)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_6 = dict_0.__repr__()
    assert (
        var_6
        == "{'q^s5B0J75TKvq\\\\c': <MultiValueDict: {'q^s5B0J75TKvq\\\\c': [<MultiValueDict: {...}>]}>}"
    )
    var_7 = case_insensitive_mapping_0.__eq__(var_1)
    assert var_7 is False
    var_7.appendlist(var_3, str_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    case_insensitive_mapping_0 = ordered_set_0.add(ordered_set_0)
    case_insensitive_mapping_0.__len__()


@pytest.mark.xfail(strict=True)
def test_case_30():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(ordered_set_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    multi_value_dict_0 = module_0.MultiValueDict(case_insensitive_mapping_0)
    set_0 = {ordered_set_0, ordered_set_0}
    ordered_set_0.__contains__(set_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    immutable_list_0 = module_0.ImmutableList()
    assert (
        f"{type(immutable_list_0).__module__}.{type(immutable_list_0).__qualname__}"
        == "datastructures.ImmutableList"
    )
    assert len(immutable_list_0) == 0
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(immutable_list_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    var_0 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_0 is True
    var_1 = case_insensitive_mapping_0.copy()
    var_2 = var_1.__repr__()
    assert var_2 == "{}"
    var_3 = case_insensitive_mapping_0.__len__()
    var_3.lists()


@pytest.mark.xfail(strict=True)
def test_case_32():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.values()
    var_1 = multi_value_dict_0.values()
    var_2 = multi_value_dict_0.update(*var_0)
    int_0 = 175
    var_3 = multi_value_dict_0.setlist(int_0, var_2)
    multi_value_dict_0.dict()


def test_case_33():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1


@pytest.mark.xfail(strict=True)
def test_case_34():
    bool_0 = True
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.__bool__()
    module_0.CaseInsensitiveMapping(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B075Kvq\\c"
    var_0 = multi_value_dict_0.lists()
    var_1 = multi_value_dict_0.__getstate__()
    var_2 = multi_value_dict_0.copy()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    var_3 = multi_value_dict_0.getlist(str_0)
    multi_value_dict_0.update(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_36():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.__repr__()
    assert var_0 == "OrderedSet()"
    var_0.dict()


def test_case_37():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {
        str_0: multi_value_dict_0,
        str_0: multi_value_dict_0,
        str_0: multi_value_dict_0,
    }
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.lists()
    var_2 = multi_value_dict_0.__getstate__()
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(var_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1


@pytest.mark.xfail(strict=True)
def test_case_38():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1
    var_2 = multi_value_dict_0.getlist(str_0)
    exception_0 = module_1.Exception()
    var_3 = multi_value_dict_0.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_3) == 1
    module_0.CaseInsensitiveMapping(var_2)


@pytest.mark.xfail(strict=True)
def test_case_39():
    multi_value_dict_0 = module_0.MultiValueDict()
    multi_value_dict_0.__deepcopy__(multi_value_dict_0)


def test_case_40():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {
        str_0: multi_value_dict_0,
        str_0: multi_value_dict_0,
        str_0: multi_value_dict_0,
    }
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.lists()
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = multi_value_dict_0.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_3) == 1


def test_case_41():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0, str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.lists()
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = multi_value_dict_0.copy()
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_3) == 1
    var_4 = var_3.__setstate__(var_3)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(var_1)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_5 = var_3.appendlist(str_0, case_insensitive_mapping_0)


@pytest.mark.xfail(strict=True)
def test_case_42():
    lookup_error_0 = module_1.LookupError()
    module_0.OrderedSet(lookup_error_0)


@pytest.mark.xfail(strict=True)
def test_case_43():
    multi_value_dict_0 = module_0.MultiValueDict()
    var_0 = multi_value_dict_0.values()
    var_1 = multi_value_dict_0.setdefault(var_0, var_0)
    assert len(multi_value_dict_0) == 1
    module_0.CaseInsensitiveMapping(var_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    bytes_0 = b"\xf3\xda\xbb\xb4\xb8\x03m\x03!\x84\x1b\xae@U^\x01"
    var_0 = multi_value_dict_0.setlistdefault(bytes_0)
    assert len(multi_value_dict_0) == 1
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    dict_0 = {str_0: multi_value_dict_0}
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError(
        *case_insensitive_mapping_0
    )
    var_1 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 2
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = case_insensitive_mapping_0.__eq__(case_insensitive_mapping_0)
    assert var_3 is True
    var_4 = multi_value_dict_0.getlist(str_0)
    list_0 = [dict_0]
    var_3.update(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_45():
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.__reversed__()
    var_0.copy()


@pytest.mark.xfail(strict=True)
def test_case_46():
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError()
    ordered_set_0 = module_0.OrderedSet()
    assert (
        f"{type(ordered_set_0).__module__}.{type(ordered_set_0).__qualname__}"
        == "datastructures.OrderedSet"
    )
    assert len(ordered_set_0) == 0
    var_0 = ordered_set_0.add(ordered_set_0)
    ordered_set_0.__repr__()


def test_case_47():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1
    case_insensitive_mapping_0 = multi_value_dict_0.__getstate__()


@pytest.mark.xfail(strict=True)
def test_case_48():
    multi_value_dict_0 = module_0.MultiValueDict()
    none_type_0 = None
    var_0 = multi_value_dict_0.setlistdefault(none_type_0, multi_value_dict_0)
    assert len(multi_value_dict_0) == 1
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_0) == 1
    var_0.copy()


@pytest.mark.xfail(strict=True)
def test_case_49():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0, str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.setdefault(var_0)
    assert len(multi_value_dict_0) == 2
    var_2 = multi_value_dict_0.lists()
    var_3 = multi_value_dict_0.__getstate__()
    var_4 = multi_value_dict_0.copy()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_4) == 2
    var_5 = var_4.__setstate__(var_4)
    module_0.CaseInsensitiveMapping(var_2)


@pytest.mark.xfail(strict=True)
def test_case_50():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0, str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.setlist(var_0, var_0)
    assert len(multi_value_dict_0) == 2
    multi_value_dict_0.setdefault(var_0)


@pytest.mark.xfail(strict=True)
def test_case_51():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    var_0 = multi_value_dict_0.setlistdefault(str_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    var_1.update()


@pytest.mark.xfail(strict=True)
def test_case_52():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1
    var_2 = multi_value_dict_0.__getstate__()
    var_3 = var_2.copy()
    var_4 = var_1.__setstate__(var_3)
    module_0.CaseInsensitiveMapping(var_0)


def test_case_53():
    none_type_0 = None
    list_0 = [none_type_0]
    multi_value_dict_key_error_0 = module_0.MultiValueDictKeyError(*list_0)
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.get(str_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_1) == 1
    var_2 = var_1.copy()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_2) == 1
    var_3 = var_2.__setstate__(dict_0)
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 1
    var_4 = case_insensitive_mapping_0.items()
    var_5 = var_4.__repr__()
    assert (
        var_5
        == "ItemsView({'q^s5B0J75TKvq\\\\c': <MultiValueDict: {'q^s5B0J75TKvq\\\\c': [<MultiValueDict: {...}>]}>})"
    )
    var_6 = var_4.__len__()


@pytest.mark.xfail(strict=True)
def test_case_54():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    var_0 = multi_value_dict_0.__setstate__(multi_value_dict_0)
    dict_0 = {str_0: multi_value_dict_0}
    var_1 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_2 = multi_value_dict_0.get(str_0, var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_2) == 1
    var_3 = multi_value_dict_0.getlist(str_0)
    list_0 = [dict_0]
    var_4 = var_2.update(*list_0)
    var_3.lists()


@pytest.mark.xfail(strict=True)
def test_case_55():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    var_0 = multi_value_dict_0.__setstate__(multi_value_dict_0)
    dict_0 = {str_0: multi_value_dict_0}
    var_1 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_2 = multi_value_dict_0.get(str_0, var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "datastructures.MultiValueDict"
    )
    assert len(var_2) == 1
    var_3 = multi_value_dict_0.getlist(str_0)
    var_4 = var_2.update(*var_3)
    var_3.lists()


@pytest.mark.xfail(strict=True)
def test_case_56():
    multi_value_dict_0 = module_0.MultiValueDict()
    str_0 = "q^s5B0J75TKvq\\c"
    case_insensitive_mapping_0 = module_0.CaseInsensitiveMapping(multi_value_dict_0)
    assert (
        f"{type(case_insensitive_mapping_0).__module__}.{type(case_insensitive_mapping_0).__qualname__}"
        == "datastructures.CaseInsensitiveMapping"
    )
    assert len(case_insensitive_mapping_0) == 0
    dict_0 = {str_0: multi_value_dict_0}
    var_0 = multi_value_dict_0.update(**dict_0)
    assert len(multi_value_dict_0) == 1
    var_1 = multi_value_dict_0.setlist(str_0, var_0)
    var_2 = multi_value_dict_0.getlist(str_0)
    list_0 = [dict_0]
    var_1.update(*list_0)
