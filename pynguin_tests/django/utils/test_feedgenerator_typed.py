# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import feedgenerator_typed as module_0
import urllib.request as module_1
import django.utils.encoding as module_2
import http.cookiejar as module_3
import posixpath as module_4
import locale as module_5
import stringprep as module_6
import base64 as module_7
import email._header_value_parser as module_8
import re as module_9


@pytest.mark.xfail(strict=True)
def test_case_0():
    none_type_0 = None
    module_0.rfc2822_date(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    var_0 = module_1.thishost()
    module_0.rfc3339_date(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "!NE729{Au\\!E"
    module_0.get_tag_uri(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_email=str_0, author_link=str_0, ttl=str_0, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": "RWb\nCx1D&",
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": "RWb\nCx1D&",
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    none_type_1 = atom1_feed_0.add_item(
        dict_0,
        str_0,
        str_0,
        author_name=dict_0,
        pubdate=none_type_0,
        comments=none_type_0,
        item_copyright=dict_0,
    )
    assert atom1_feed_0.items == [
        {
            "title": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "link": "RWb%0ACx1D&",
            "description": "RWb\nCx1D&",
            "author_email": None,
            "author_name": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "ttl": None,
        }
    ]
    str_1 = atom1_feed_0.writeString(str_0)
    dict_1 = atom1_feed_0.root_attributes()
    var_0 = module_2.iri_to_uri(str_0)
    var_0.return_ok_verifiability(dict_1, var_0)


def test_case_4():
    str_0 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=str_0
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": None,
        "subtitle": "[h%1C",
        "categories": ["[", "h", "%", "1", "C"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"


def test_case_5():
    str_0 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:39.452546+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss_userland091_feed_0 = module_0.RssUserland091Feed(str_0, str_0, str_0)
    assert (
        f"{type(rss_userland091_feed_0).__module__}.{type(rss_userland091_feed_0).__qualname__}"
        == "feedgenerator_typed.RssUserland091Feed"
    )
    assert rss_userland091_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:39.452546+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:39.452546+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:39.452546+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:39.452546+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
    }
    assert rss_userland091_feed_0.items == []


def test_case_6():
    str_0 = " _(%s) "
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, str_0, feed_guid=str_0, ttl=str_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": " _(%s) ",
        "link": "%20_(%s)%20",
        "description": " _(%s) ",
        "language": " _(%s) ",
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": " _(%s) ",
        "ttl": " _(%s) ",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"


def test_case_7():
    str_0 = 'O7=2$J(7Ro$H3"%)"&H'
    enclosure_0 = module_0.Enclosure(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "g2DHqPA}"
    dict_0 = {}
    syndication_feed_0 = module_0.SyndicationFeed(
        str_0,
        str_0,
        str_0,
        author_name=str_0,
        categories=str_0,
        feed_guid=str_0,
        ttl=str_0,
        **dict_0,
    )
    assert syndication_feed_0.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    int_0 = module_3.deepvalues(str_0)
    syndication_feed_0.writeString(str_0)


def test_case_9():
    str_0 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=str_0
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": None,
        "subtitle": "[h%1C",
        "categories": ["[", "h", "%", "1", "C"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    int_0 = atom1_feed_0.num_items()
    str_1 = atom1_feed_0.writeString(str_0)


def test_case_10():
    str_0 = "3e!Pq6sW9m"
    none_type_0 = None
    rss_userland091_feed_0 = module_0.RssUserland091Feed(
        str_0,
        str_0,
        none_type_0,
        none_type_0,
        author_link=none_type_0,
        categories=none_type_0,
    )
    assert (
        f"{type(rss_userland091_feed_0).__module__}.{type(rss_userland091_feed_0).__qualname__}"
        == "feedgenerator_typed.RssUserland091Feed"
    )
    assert rss_userland091_feed_0.feed == {
        "title": "3e!Pq6sW9m",
        "link": "3e!Pq6sW9m",
        "description": None,
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "3e!Pq6sW9m",
        "ttl": None,
    }
    assert rss_userland091_feed_0.items == []
    str_1 = rss_userland091_feed_0.writeString(str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    str_0 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=none_type_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": None,
        "subtitle": "[h%1C",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    int_0 = atom1_feed_0.num_items()
    str_1 = "Y'M7ke!"
    none_type_1 = atom1_feed_0.add_item(
        none_type_0,
        str_1,
        str_0,
        str_1,
        comments=none_type_0,
        unique_id=none_type_0,
        unique_id_is_permalink=none_type_0,
        item_copyright=str_1,
        enclosures=str_1,
    )
    assert atom1_feed_0.items == [
        {
            "title": None,
            "link": "Y'M7ke!",
            "description": "[h%1C",
            "author_email": "Y'M7ke!",
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": "Y'M7ke!",
            "categories": (),
            "item_copyright": "Y'M7ke!",
            "ttl": None,
        }
    ]
    atom1_feed_0.writeString(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "g2DHqPA}"
    dict_0 = {}
    syndication_feed_0 = module_0.SyndicationFeed(
        str_0,
        str_0,
        str_0,
        author_name=str_0,
        categories=str_0,
        feed_guid=str_0,
        ttl=str_0,
        **dict_0,
    )
    assert syndication_feed_0.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    str_1 = "we{4odmGb%<X(w{n3P\\"
    int_0 = syndication_feed_0.num_items()
    none_type_0 = None
    none_type_1 = syndication_feed_0.add_item_elements(int_0, str_0)
    str_2 = "\n        Return a mergeable gettext.GNUTranslations instance.\n\n        A convenience wrapper. By default gettext uses 'fallback=False'.\n        Using param `use_null_fallback` to avoid confusion with any other\n        references to 'fallback'.\n        "
    none_type_2 = syndication_feed_0.add_item(
        none_type_0,
        str_2,
        str_1,
        comments=str_1,
        unique_id_is_permalink=none_type_0,
        enclosures=none_type_0,
    )
    assert syndication_feed_0.items == [
        {
            "title": None,
            "link": "%0A%20%20%20%20%20%20%20%20Return%20a%20mergeable%20gettext.GNUTranslations%20instance.%0A%0A%20%20%20%20%20%20%20%20A%20convenience%20wrapper.%20By%20default%20gettext%20uses%20'fallback=False'.%0A%20%20%20%20%20%20%20%20Using%20param%20%60use_null_fallback%60%20to%20avoid%20confusion%20with%20any%20other%0A%20%20%20%20%20%20%20%20references%20to%20'fallback'.%0A%20%20%20%20%20%20%20%20",
            "description": "we{4odmGb%<X(w{n3P\\",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": "we{4odmGb%<X(w{n3P\\",
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    dict_1 = syndication_feed_0.item_attributes(dict_0)
    datetime_0 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "datetime.datetime"
    )
    str_3 = "1r.?? asPj\x0c;C=6"
    module_0.RssFeed(str_3, int_0, str_1)


def test_case_13():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_0, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "RWb\nCx1D&",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "f*sT#a>pI"
    str_2 = atom1_feed_0.writeString(str_1)
    str_3 = "X"
    none_type_1 = rss201rev2_feed_0.add_item(
        none_type_0,
        str_2,
        none_type_0,
        author_link=str_0,
        unique_id=str_0,
        categories=str_2,
        enclosures=none_type_0,
    )
    str_4 = rss201rev2_feed_0.writeString(str_3)


def test_case_14():
    str_0 = "g2DHqPA}"
    dict_0 = {}
    syndication_feed_0 = module_0.SyndicationFeed(
        str_0,
        str_0,
        str_0,
        author_name=str_0,
        categories=str_0,
        feed_guid=str_0,
        ttl=str_0,
        **dict_0,
    )
    assert syndication_feed_0.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    none_type_0 = syndication_feed_0.add_root_elements(dict_0)
    str_1 = "we{4odmGb%<X(w{n3P\\"
    none_type_1 = None
    str_2 = "\n        Return a mergeable gettext.GNUTranslations instance.\n\n        A convenience wrapper. By default gettext uses 'fallback=False'.\n        Using param `use_null_fallback` to avoid confusion with any other\n        references to 'fallback'.\n        "
    none_type_2 = syndication_feed_0.add_item(
        none_type_1,
        str_2,
        str_1,
        comments=str_1,
        unique_id_is_permalink=none_type_1,
        enclosures=none_type_1,
    )
    assert syndication_feed_0.items == [
        {
            "title": None,
            "link": "%0A%20%20%20%20%20%20%20%20Return%20a%20mergeable%20gettext.GNUTranslations%20instance.%0A%0A%20%20%20%20%20%20%20%20A%20convenience%20wrapper.%20By%20default%20gettext%20uses%20'fallback=False'.%0A%20%20%20%20%20%20%20%20Using%20param%20%60use_null_fallback%60%20to%20avoid%20confusion%20with%20any%20other%0A%20%20%20%20%20%20%20%20references%20to%20'fallback'.%0A%20%20%20%20%20%20%20%20",
            "description": "we{4odmGb%<X(w{n3P\\",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": "we{4odmGb%<X(w{n3P\\",
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    dict_1 = syndication_feed_0.item_attributes(dict_0)
    datetime_0 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "datetime.datetime"
    )
    str_3 = "1gRap~2\x0c"
    str_4 = "1:7,H$AD"
    str_5 = '&J"Hf<Li\rJI '
    rss_userland091_feed_0 = module_0.RssUserland091Feed(
        str_3, str_3, str_4, author_email=str_3, author_link=none_type_1, feed_url=str_5
    )
    assert (
        f"{type(rss_userland091_feed_0).__module__}.{type(rss_userland091_feed_0).__qualname__}"
        == "feedgenerator_typed.RssUserland091Feed"
    )
    assert rss_userland091_feed_0.feed == {
        "title": "1gRap~2\x0c",
        "link": "1gRap~2%0C",
        "description": "1:7,H$AD",
        "language": None,
        "author_email": "1gRap~2\x0c",
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": "&J%22Hf%3CLi%0DJI%20",
        "feed_copyright": None,
        "id": "1gRap~2\x0c",
        "ttl": None,
    }
    assert rss_userland091_feed_0.items == []


def test_case_15():
    str_0 = "g2DHqPA}"
    dict_0 = {}
    syndication_feed_0 = module_0.SyndicationFeed(
        str_0,
        str_0,
        str_0,
        author_name=str_0,
        categories=str_0,
        feed_guid=str_0,
        ttl=str_0,
        **dict_0,
    )
    assert syndication_feed_0.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    str_1 = "we{4odmGb%<X(w{n3P\\"
    datetime_0 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "datetime.datetime"
    )
    str_2 = "\n    Change every non-whitespace character to the given char.\n    Used in the templatize function.\n    "
    none_type_0 = None
    none_type_1 = syndication_feed_0.add_item(
        none_type_0,
        none_type_0,
        str_2,
        comments=str_1,
        updateddate=syndication_feed_0,
        enclosures=dict_0,
    )
    dict_1 = syndication_feed_0.item_attributes(none_type_1)
    datetime_1 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_1).__module__}.{type(datetime_1).__qualname__}"
        == "feedgenerator_typed.SyndicationFeed"
    )
    assert datetime_1.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    assert (
        f"{type(datetime_1.items).__module__}.{type(datetime_1.items).__qualname__}"
        == "builtins.list"
    )
    assert len(datetime_1.items) == 1
    var_0 = module_4.basename(str_2)
    var_1 = var_0.__repr__()
    var_2 = var_1.__ge__(str_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "g2DHqPA}"
    dict_0 = {}
    syndication_feed_0 = module_0.SyndicationFeed(
        str_0,
        str_0,
        str_0,
        author_name=str_0,
        categories=str_0,
        feed_guid=str_0,
        ttl=str_0,
        **dict_0,
    )
    assert syndication_feed_0.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    datetime_0 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "datetime.datetime"
    )
    str_1 = "\n    Change every non-whitespace character to the given char.\n    Used in the templatize function.\n    "
    none_type_0 = None
    none_type_1 = syndication_feed_0.add_item(
        none_type_0,
        none_type_0,
        str_1,
        comments=str_1,
        updateddate=syndication_feed_0,
        enclosures=dict_0,
    )
    dict_1 = syndication_feed_0.item_attributes(none_type_1)
    datetime_1 = syndication_feed_0.latest_post_date()
    assert (
        f"{type(datetime_1).__module__}.{type(datetime_1).__qualname__}"
        == "feedgenerator_typed.SyndicationFeed"
    )
    assert datetime_1.feed == {
        "title": "g2DHqPA}",
        "link": "g2DHqPA%7D",
        "description": "g2DHqPA}",
        "language": None,
        "author_email": None,
        "author_name": "g2DHqPA}",
        "author_link": None,
        "subtitle": None,
        "categories": ["g", "2", "D", "H", "q", "P", "A", "}"],
        "feed_url": None,
        "feed_copyright": None,
        "id": "g2DHqPA}",
        "ttl": "g2DHqPA}",
    }
    assert (
        f"{type(datetime_1.items).__module__}.{type(datetime_1.items).__qualname__}"
        == "builtins.list"
    )
    assert len(datetime_1.items) == 1
    str_2 = module_0.rfc3339_date(datetime_0)
    str_3 = "$=$$lQ*L<lF*4~NBX4^."
    none_type_2 = syndication_feed_0.add_item(
        str_0,
        str_3,
        dict_1,
        str_1,
        author_link=none_type_0,
        pubdate=str_3,
        comments=none_type_1,
        unique_id_is_permalink=none_type_0,
        ttl=str_3,
        **dict_1,
    )
    assert len(datetime_1.items) == 2
    dict_2 = syndication_feed_0.item_attributes(syndication_feed_0)
    syndication_feed_0.latest_post_date()


def test_case_17():
    str_0 = "3e!Pq6sW9m"
    none_type_0 = None
    rss_userland091_feed_0 = module_0.RssUserland091Feed(
        str_0, str_0, none_type_0, str_0, categories=none_type_0
    )
    assert (
        f"{type(rss_userland091_feed_0).__module__}.{type(rss_userland091_feed_0).__qualname__}"
        == "feedgenerator_typed.RssUserland091Feed"
    )
    assert rss_userland091_feed_0.feed == {
        "title": "3e!Pq6sW9m",
        "link": "3e!Pq6sW9m",
        "description": None,
        "language": "3e!Pq6sW9m",
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "3e!Pq6sW9m",
        "ttl": None,
    }
    assert rss_userland091_feed_0.items == []
    str_1 = rss_userland091_feed_0.writeString(str_0)


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    str_0 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=none_type_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": None,
        "subtitle": "[h%1C",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_1, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "[h%1C",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_2 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.650253+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_3 = atom1_feed_0.writeString(str_2)
    dict_0 = atom1_feed_0.root_attributes()
    module_2.iri_to_uri(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_email=str_0, author_link=str_0, ttl=str_0, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": "RWb\nCx1D&",
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": "RWb\nCx1D&",
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_1, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_2 = 'B#\x0b<Tr\nr"'
    str_3 = atom1_feed_0.writeString(str_1)
    dict_1 = atom1_feed_0.root_attributes()
    var_0 = module_2.iri_to_uri(str_3)
    str_4 = "%%(%s)s"
    str_5 = "(=M:N8zBt8NLn1hjaUV{"
    none_type_2 = atom1_feed_0.add_item(
        str_0,
        str_0,
        dict_0,
        str_5,
        author_link=str_3,
        unique_id=str_1,
        ttl=str_3,
        updateddate=var_0,
    )
    str_6 = "\n    Reset global state when LANGUAGES setting has been changed, as some\n    languages should no longer be accepted.\n    "
    none_type_3 = atom1_feed_0.add_item(
        str_3, str_6, str_2, author_link=str_5, updateddate=str_4
    )
    dict_2 = atom1_feed_0.item_attributes(str_5)
    datetime_0 = atom1_feed_0.latest_post_date()
    module_0.rfc3339_date(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    none_type_0 = None
    str_0 = "\n    Return a string of the translation of either the singular or plural,\n    based on the number.\n    "
    str_1 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_1, str_1, author_name=str_1, subtitle=str_1, categories=none_type_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": None,
        "subtitle": "[h%1C",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    int_0 = atom1_feed_0.num_items()
    str_2 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "\n    Return a string of the translation of either the singular or plural,\n    based on the number.\n    ",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    dict_0 = atom1_feed_0.root_attributes()
    str_3 = "Y'M7ke!"
    str_4 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.650253+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    none_type_2 = atom1_feed_0.add_item(
        str_1,
        str_1,
        int_0,
        author_link=str_4,
        pubdate=none_type_0,
        comments=str_3,
        unique_id=str_0,
        unique_id_is_permalink=none_type_0,
        categories=str_3,
        enclosures=none_type_0,
    )
    assert atom1_feed_0.items == [
        {
            "title": "\n    Return a string of the translation of either the singular or plural,\n    based on the number.\n    ",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        },
        {
            "title": "[h%1C",
            "link": "[h%1C",
            "description": "0",
            "author_email": None,
            "author_name": None,
            "author_link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.650253+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "pubdate": None,
            "updateddate": None,
            "comments": "Y'M7ke!",
            "unique_id": "\n    Return a string of the translation of either the singular or plural,\n    based on the number.\n    ",
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": ["Y", "'", "M", "7", "k", "e", "!"],
            "item_copyright": None,
            "ttl": None,
        },
    ]
    str_5 = atom1_feed_0.writeString(str_4)
    var_0 = module_2.iri_to_uri(none_type_2)
    var_0.return_ok_verifiability(str_2, str_5)


@pytest.mark.xfail(strict=True)
def test_case_21():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_email=str_0, author_link=str_0, ttl=str_0, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": "RWb\nCx1D&",
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": "RWb\nCx1D&",
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_1, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_2 = 'B#\x0b<Tr\nr"'
    str_3 = atom1_feed_0.writeString(str_1)
    dict_1 = atom1_feed_0.root_attributes()
    var_0 = module_2.iri_to_uri(str_3)
    str_4 = "(=M:N8zBt8NLn1hjaUV{"
    str_5 = "AM5(\n)m{s2T#bA+"
    dict_2 = atom1_feed_0.item_attributes(dict_1)
    str_6 = "\x0b4[_Fzw"
    none_type_2 = atom1_feed_0.add_item(
        str_0,
        str_5,
        dict_0,
        str_6,
        author_link=str_3,
        unique_id=str_1,
        ttl=str_3,
        updateddate=var_0,
    )
    str_7 = "\n    Reset global state when LANGUAGES setting has been changed, as some\n    languages should no longer be accepted.\n    "
    none_type_3 = atom1_feed_0.add_item(
        str_3, str_7, str_2, author_link=str_4, updateddate=str_1
    )
    dict_3 = atom1_feed_0.item_attributes(str_4)
    datetime_0 = atom1_feed_0.latest_post_date()
    assert datetime_0 == "-P0\x0cD~m"
    module_0.rfc3339_date(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_email=str_0, author_link=str_0, ttl=str_0, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": "RWb\nCx1D&",
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": "RWb\nCx1D&",
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "Y'M7ke!"
    none_type_1 = atom1_feed_0.add_item(
        dict_0,
        str_0,
        str_1,
        author_name=dict_0,
        pubdate=none_type_0,
        comments=none_type_0,
        item_copyright=dict_0,
    )
    assert atom1_feed_0.items == [
        {
            "title": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "link": "RWb%0ACx1D&",
            "description": "Y'M7ke!",
            "author_email": None,
            "author_name": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "ttl": None,
        }
    ]
    str_2 = "Y'M7ke!"
    none_type_2 = atom1_feed_0.add_item(
        str_0, str_0, str_2, author_name=str_0, author_link=str_0, **dict_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "link": "RWb%0ACx1D&",
            "description": "Y'M7ke!",
            "author_email": None,
            "author_name": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "ttl": None,
        },
        {
            "title": "RWb\nCx1D&",
            "link": "RWb%0ACx1D&",
            "description": "Y'M7ke!",
            "author_email": None,
            "author_name": "RWb\nCx1D&",
            "author_link": "RWb%0ACx1D&",
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
            "RWb\nCx1D&": "RWb\nCx1D&",
        },
    ]
    str_3 = 'B#\x0b<Tr\nr"'
    str_4 = atom1_feed_0.writeString(str_3)
    module_5.delocalize(none_type_2)


@pytest.mark.xfail(strict=True)
def test_case_23():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_2 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0,
        str_2,
        str_0,
        none_type_0,
        subtitle=str_0,
        feed_url=str_2,
        feed_copyright=str_2,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": "[h%1C",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": "RWb\nCx1D&",
        "categories": (),
        "feed_url": "[h%1C",
        "feed_copyright": "[h%1C",
        "id": "[h%1C",
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_3 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_1,
        str_3,
        none_type_0,
        none_type_0,
        atom1_feed_0,
        str_2,
        unique_id=none_type_0,
        unique_id_is_permalink=none_type_0,
    )
    str_4 = 'B#\x0b<Tr\nr"'
    str_5 = atom1_feed_0.writeString(str_1)
    dict_0 = atom1_feed_0.root_attributes()
    str_6 = 'Liw6_ba]*H"'
    str_7 = "(=M:N8zBt8NLn1hjaUV{"
    none_type_2 = atom1_feed_0.add_item(
        str_6,
        none_type_0,
        str_7,
        unique_id_is_permalink=str_5,
        updateddate=str_4,
        **dict_0,
    )
    none_type_3 = atom1_feed_0.add_item(
        atom1_feed_0,
        str_3,
        atom1_feed_0,
        str_1,
        unique_id=none_type_2,
        item_copyright=none_type_2,
        enclosures=str_7,
    )
    dict_1 = atom1_feed_0.item_attributes(atom1_feed_0)
    datetime_0 = atom1_feed_0.latest_post_date()
    assert datetime_0 == 'B#\x0b<Tr\nr"'
    module_0.rfc3339_date(datetime_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    str_0 = module_0.get_tag_uri(none_type_0, none_type_0)
    assert str_0 == "tag:None:b''/b''"
    none_type_1 = None
    str_1 = "RWb\nCx1D&"
    dict_0 = {str_1: str_1}
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_1, str_1, author_email=str_1, author_link=str_1, ttl=str_1, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": "RWb\nCx1D&",
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": "RWb\nCx1D&",
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "Y'M7ke!"
    str_3 = "Z2"
    atom1_feed_1 = module_0.Atom1Feed(
        str_3, str_2, str_3, subtitle=str_1, feed_url=str_3
    )
    assert atom1_feed_1.feed == {
        "title": "Z2",
        "link": "Y'M7ke!",
        "description": "Z2",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": "RWb\nCx1D&",
        "categories": (),
        "feed_url": "Z2",
        "feed_copyright": None,
        "id": "Y'M7ke!",
        "ttl": None,
    }
    none_type_2 = atom1_feed_0.add_item(
        str_1,
        str_1,
        dict_0,
        str_1,
        dict_0,
        comments=str_1,
        item_copyright=none_type_1,
        updateddate=none_type_1,
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "RWb%0ACx1D&",
            "description": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "author_email": "RWb\nCx1D&",
            "author_name": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": "RWb\nCx1D&",
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_4 = 'Tie|"'
    str_5 = atom1_feed_0.writeString(str_4)
    dict_1 = atom1_feed_1.root_attributes()
    str_6 = atom1_feed_1.writeString(none_type_2)
    module_6.in_table_b1(str_2)


@pytest.mark.xfail(strict=True)
def test_case_25():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_0, str_1, author_link=str_0, ttl=none_type_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "author_email": None,
        "author_name": None,
        "author_link": "RWb%0ACx1D&",
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    int_0 = atom1_feed_0.num_items()
    str_2 = "\n    Return a list of paths to user-provides languages files.\n    "
    none_type_1 = atom1_feed_0.add_item(
        atom1_feed_0,
        str_2,
        int_0,
        comments=str_1,
        unique_id=int_0,
        unique_id_is_permalink=none_type_0,
        categories=none_type_0,
        ttl=str_1,
        updateddate=int_0,
    )
    dict_0 = atom1_feed_0.root_attributes()
    str_3 = "v'M7ke!"
    str_4 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;/%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;/%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;/%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.670344+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;/%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    int_1 = atom1_feed_0.num_items()
    str_5 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.652770+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    none_type_2 = atom1_feed_0.add_item(
        str_4,
        str_5,
        none_type_1,
        str_3,
        author_link=none_type_0,
        categories=none_type_1,
        ttl=none_type_0,
        enclosures=none_type_0,
        **dict_0,
    )
    str_6 = "^*A}?{?n]3O !J<k "
    atom1_feed_0.writeString(str_6)


@pytest.mark.xfail(strict=True)
def test_case_26():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_2 = "[h%1C"
    str_3 = "[h%1C"
    atom1_feed_0 = module_0.Atom1Feed(
        str_2,
        str_3,
        str_3,
        author_name=str_3,
        author_link=str_3,
        subtitle=str_2,
        ttl=str_2,
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": "[h%1C",
        "link": "[h%1C",
        "description": "[h%1C",
        "language": None,
        "author_email": None,
        "author_name": "[h%1C",
        "author_link": "[h%1C",
        "subtitle": "[h%1C",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "[h%1C",
        "ttl": "[h%1C",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    int_0 = atom1_feed_0.num_items()
    str_4 = ""
    none_type_1 = atom1_feed_0.add_item(
        str_0,
        str_3,
        str_4,
        int_0,
        pubdate=none_type_0,
        unique_id_is_permalink=str_2,
        item_copyright=str_3,
        ttl=str_2,
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "[h%1C",
            "description": "",
            "author_email": "0",
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": "[h%1C",
            "enclosures": (),
            "categories": (),
            "item_copyright": "[h%1C",
            "ttl": "[h%1C",
        }
    ]
    dict_0 = atom1_feed_0.root_attributes()
    str_5 = '7"_p(\x0bKG@"GZ!\'g{^dS'
    str_6 = "$yq.7g@\rn )3[y"
    none_type_2 = atom1_feed_0.add_item(
        str_5, str_6, str_3, unique_id_is_permalink=str_1, **dict_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "[h%1C",
            "description": "",
            "author_email": "0",
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": "[h%1C",
            "enclosures": (),
            "categories": (),
            "item_copyright": "[h%1C",
            "ttl": "[h%1C",
        },
        {
            "title": '7"_p(\x0bKG@"GZ!\'g{^dS',
            "link": "$yq.7g@%0Dn%20)3[y",
            "description": "[h%1C",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
            "xmlns": "http://www.w3.org/2005/Atom",
        },
    ]
    str_7 = "t"
    atom1_feed_0.writeString(str_7)


@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "P6*8|AD\tY,Xqd{2\\>+J"
    rss_userland091_feed_0 = module_0.RssUserland091Feed(
        str_0, str_0, str_0, feed_url=str_0
    )
    assert (
        f"{type(rss_userland091_feed_0).__module__}.{type(rss_userland091_feed_0).__qualname__}"
        == "feedgenerator_typed.RssUserland091Feed"
    )
    assert rss_userland091_feed_0.feed == {
        "title": "P6*8|AD\tY,Xqd{2\\>+J",
        "link": "P6*8%7CAD%09Y,Xqd%7B2%5C%3E+J",
        "description": "P6*8|AD\tY,Xqd{2\\>+J",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": "P6*8%7CAD%09Y,Xqd%7B2%5C%3E+J",
        "feed_copyright": None,
        "id": "P6*8|AD\tY,Xqd{2\\>+J",
        "ttl": None,
    }
    assert rss_userland091_feed_0.items == []
    set_0 = {rss_userland091_feed_0, str_0}
    str_1 = rss_userland091_feed_0.writeString(set_0)
    none_type_0 = None
    module_7.encodebytes(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_0, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_0, str_0, str_0, author_name=str_0, subtitle=str_0, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "RWb%0ACx1D&",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "RWb\nCx1D&",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_1 = "f*sT#a>pI"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_1, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_2 = atom1_feed_0.writeString(str_1)
    dict_1 = atom1_feed_0.root_attributes()
    str_3 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_4 = ""
    none_type_2 = rss201rev2_feed_0.add_item(
        none_type_0,
        str_4,
        str_3,
        pubdate=none_type_1,
        comments=str_4,
        enclosures=none_type_1,
    )
    assert rss201rev2_feed_0.items == [
        {
            "title": None,
            "link": "",
            "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": "",
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_5 = rss201rev2_feed_0.writeString(str_4)
    assert (
        str_5
        == '<?xml version="1.0" encoding=""?>\n<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RWb\nCx1D&amp;</title><link>RWb%0ACx1D&amp;</link><description>RWb\nCx1D&amp;</description><lastBuildDate>Tue, 11 Jul 2023 01:37:20 +0000</lastBuildDate><item><title/><link/><description>%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E</description><comments/></item></channel></rss>'
    )
    module_8.get_mailbox_list(atom1_feed_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "-P0\x0cD~m"
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "-P0%0CD~m",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_3 = 'B#\x0b<Tr\nr"'
    str_4 = atom1_feed_0.writeString(str_2)
    dict_1 = atom1_feed_0.root_attributes()
    str_5 = "X"
    str_6 = "5Amo^7WG3VB;B73~"
    str_7 = "0(B\x0bM9"
    none_type_2 = rss201rev2_feed_0.add_item(
        rss201rev2_feed_0,
        none_type_0,
        str_6,
        str_1,
        str_5,
        item_copyright=atom1_feed_0,
        updateddate=none_type_0,
        enclosures=none_type_0,
        **dict_0,
    )
    str_8 = rss201rev2_feed_0.writeString(str_3)
    dict_2 = atom1_feed_0.root_attributes()
    var_0 = module_2.iri_to_uri(str_7)
    var_0.return_ok_verifiability(none_type_0, none_type_1)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=str_1
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": [
            "%",
            "3",
            "C",
            "?",
            "x",
            "m",
            "l",
            "%",
            "2",
            "0",
            "v",
            "e",
            "r",
            "s",
            "i",
            "o",
            "n",
            "=",
            "%",
            "2",
            "2",
            "1",
            ".",
            "0",
            "%",
            "2",
            "2",
            "%",
            "2",
            "0",
            "e",
            "n",
            "c",
            "o",
            "d",
            "i",
            "n",
            "g",
            "=",
            "%",
            "2",
            "2",
            "-",
            "P",
            "0",
            "%",
            "0",
            "C",
            "D",
            "~",
            "m",
            "%",
            "2",
            "2",
            "?",
            "%",
            "3",
            "E",
            "%",
            "0",
            "A",
            "%",
            "3",
            "C",
            "f",
            "e",
            "e",
            "d",
            "%",
            "2",
            "0",
            "x",
            "m",
            "l",
            "n",
            "s",
            "=",
            "%",
            "2",
            "2",
            "h",
            "t",
            "t",
            "p",
            ":",
            "/",
            "/",
            "w",
            "w",
            "w",
            ".",
            "w",
            "3",
            ".",
            "o",
            "r",
            "g",
            "/",
            "2",
            "0",
            "0",
            "5",
            "/",
            "A",
            "t",
            "o",
            "m",
            "%",
            "2",
            "2",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "t",
            "i",
            "t",
            "l",
            "e",
            "%",
            "3",
            "E",
            "R",
            "W",
            "b",
            "%",
            "0",
            "A",
            "C",
            "x",
            "1",
            "D",
            "&",
            "a",
            "m",
            "p",
            ";",
            "%",
            "3",
            "C",
            "/",
            "t",
            "i",
            "t",
            "l",
            "e",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "l",
            "i",
            "n",
            "k",
            "%",
            "2",
            "0",
            "h",
            "r",
            "e",
            "f",
            "=",
            "%",
            "2",
            "2",
            "R",
            "W",
            "b",
            "%",
            "0",
            "A",
            "C",
            "x",
            "1",
            "D",
            "&",
            "a",
            "m",
            "p",
            ";",
            "%",
            "2",
            "2",
            "%",
            "2",
            "0",
            "r",
            "e",
            "l",
            "=",
            "%",
            "2",
            "2",
            "a",
            "l",
            "t",
            "e",
            "r",
            "n",
            "a",
            "t",
            "e",
            "%",
            "2",
            "2",
            "/",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "i",
            "d",
            "%",
            "3",
            "E",
            "R",
            "W",
            "b",
            "%",
            "0",
            "A",
            "C",
            "x",
            "1",
            "D",
            "&",
            "a",
            "m",
            "p",
            ";",
            "%",
            "3",
            "C",
            "/",
            "i",
            "d",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "u",
            "p",
            "d",
            "a",
            "t",
            "e",
            "d",
            "%",
            "3",
            "E",
            "2",
            "0",
            "2",
            "3",
            "-",
            "0",
            "7",
            "-",
            "1",
            "1",
            "T",
            "0",
            "1",
            ":",
            "2",
            "6",
            ":",
            "3",
            "5",
            ".",
            "4",
            "5",
            "2",
            "7",
            "0",
            "2",
            "+",
            "0",
            "0",
            ":",
            "0",
            "0",
            "%",
            "3",
            "C",
            "/",
            "u",
            "p",
            "d",
            "a",
            "t",
            "e",
            "d",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "e",
            "n",
            "t",
            "r",
            "y",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "t",
            "i",
            "t",
            "l",
            "e",
            "%",
            "3",
            "E",
            "R",
            "W",
            "b",
            "%",
            "0",
            "A",
            "C",
            "x",
            "1",
            "D",
            "&",
            "a",
            "m",
            "p",
            ";",
            "%",
            "3",
            "C",
            "/",
            "t",
            "i",
            "t",
            "l",
            "e",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "l",
            "i",
            "n",
            "k",
            "%",
            "2",
            "0",
            "h",
            "r",
            "e",
            "f",
            "=",
            "%",
            "2",
            "2",
            "-",
            "P",
            "0",
            "%",
            "0",
            "C",
            "D",
            "~",
            "m",
            "%",
            "2",
            "2",
            "%",
            "2",
            "0",
            "r",
            "e",
            "l",
            "=",
            "%",
            "2",
            "2",
            "a",
            "l",
            "t",
            "e",
            "r",
            "n",
            "a",
            "t",
            "e",
            "%",
            "2",
            "2",
            "/",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "i",
            "d",
            "%",
            "3",
            "E",
            "t",
            "a",
            "g",
            ":",
            "N",
            "o",
            "n",
            "e",
            ":",
            "-",
            "P",
            "0",
            "%",
            "0",
            "C",
            "D",
            "~",
            "m",
            "/",
            "%",
            "3",
            "C",
            "/",
            "i",
            "d",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "/",
            "e",
            "n",
            "t",
            "r",
            "y",
            "%",
            "3",
            "E",
            "%",
            "3",
            "C",
            "/",
            "f",
            "e",
            "e",
            "d",
            "%",
            "3",
            "E",
        ],
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "f*sT#a>pI"
    str_3 = 'B#\x0b<Tr\nr"'
    str_4 = atom1_feed_0.writeString(str_2)
    dict_1 = atom1_feed_0.root_attributes()
    str_5 = ""
    str_6 = rss201rev2_feed_0.writeString(str_5)
    dict_2 = atom1_feed_0.root_attributes()
    str_7 = "\r"
    none_type_0 = None
    none_type_1 = rss201rev2_feed_0.add_item(
        none_type_0,
        str_1,
        str_2,
        author_name=str_7,
        comments=rss201rev2_feed_0,
        unique_id=str_3,
    )
    rss201rev2_feed_0.writeString(str_0)


@pytest.mark.xfail(strict=True)
def test_case_31():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "f*sT#a>pI"
    dict_1 = rss201rev2_feed_0.root_attributes()
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    datetime_0 = atom1_feed_0.latest_post_date()
    assert (
        f"{type(datetime_0).__module__}.{type(datetime_0).__qualname__}"
        == "datetime.datetime"
    )
    str_3 = 'B#\x0b<Tr\nr"'
    str_4 = rss201rev2_feed_0.writeString(atom1_feed_0)
    dict_2 = atom1_feed_0.root_attributes()
    none_type_2 = rss201rev2_feed_0.add_item(str_4, str_2, none_type_1, ttl=str_3)
    rss201rev2_feed_0.writeString(rss201rev2_feed_0)


@pytest.mark.xfail(strict=True)
def test_case_32():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    str_2 = "%%(s"
    int_0 = rss201rev2_feed_0.num_items()
    str_3 = ""
    none_type_1 = rss201rev2_feed_0.add_item(
        str_3, str_1, str_2, str_2, pubdate=none_type_0
    )
    assert rss201rev2_feed_0.items == [
        {
            "title": "",
            "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "description": "%%(s",
            "author_email": "%%(s",
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_4 = rss201rev2_feed_0.writeString(none_type_1)
    module_9.fullmatch(str_2, str_1, dict_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    dict_1 = rss201rev2_feed_0.root_attributes()
    str_2 = "The translation infrastructure cannot be initialized before the apps registry is ready. Check that you don't make non-lazy gettext calls at import time."
    str_3 = ">2nvMqNH b.FoJg\nGHx"
    none_type_1 = atom1_feed_0.add_item(
        str_2, str_1, str_3, str_1, unique_id_is_permalink=none_type_0, ttl=str_2
    )
    assert atom1_feed_0.items == [
        {
            "title": "The translation infrastructure cannot be initialized before the apps registry is ready. Check that you don't make non-lazy gettext calls at import time.",
            "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "description": ">2nvMqNH b.FoJg\nGHx",
            "author_email": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": "The translation infrastructure cannot be initialized before the apps registry is ready. Check that you don't make non-lazy gettext calls at import time.",
        }
    ]
    str_4 = 'B#\x0b<Tr\nr"'
    str_5 = atom1_feed_0.writeString(atom1_feed_0)
    dict_2 = atom1_feed_0.root_attributes()
    str_6 = "Y'M7ke!"
    none_type_2 = rss201rev2_feed_0.add_item(
        none_type_1,
        str_0,
        str_5,
        author_link=str_4,
        pubdate=none_type_0,
        categories=none_type_1,
        item_copyright=none_type_0,
        enclosures=str_6,
        **dict_0,
    )
    rss201rev2_feed_0.writeString(str_1)


@pytest.mark.xfail(strict=True)
def test_case_34():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "f*sT#a>pI"
    int_0 = rss201rev2_feed_0.num_items()
    dict_1 = rss201rev2_feed_0.root_attributes()
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_3 = atom1_feed_0.writeString(str_0)
    dict_2 = atom1_feed_0.root_attributes()
    str_4 = "X"
    str_5 = "%%(s"
    str_6 = "SUp"
    str_7 = "oN"
    none_type_2 = rss201rev2_feed_0.add_item(
        str_6,
        str_5,
        none_type_0,
        unique_id=str_7,
        unique_id_is_permalink=none_type_1,
        categories=none_type_1,
        item_copyright=none_type_0,
        ttl=none_type_1,
        enclosures=str_4,
    )
    assert rss201rev2_feed_0.items == [
        {
            "title": "SUp",
            "link": "%%(s",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": "oN",
            "unique_id_is_permalink": None,
            "enclosures": "X",
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    rss201rev2_feed_0.writeString(rss201rev2_feed_0)


def test_case_35():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_2 = "i"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(
        none_type_0, str_2, str_2, author_email=str_1, feed_copyright=str_2
    )
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": None,
        "link": "i",
        "description": "i",
        "language": None,
        "author_email": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": "i",
        "id": "i",
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    str_3 = "\"`+\x0cAP)ezT]'cg"
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0, str_3, str_0, author_email=none_type_0, feed_guid=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": "%22%60+%0CAP)ezT]'cg",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "\"`+\x0cAP)ezT]'cg",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_4 = "f*sT#a>pI"
    dict_1 = atom1_feed_0.root_attributes()
    str_5 = "/`v+r;mIB[lUuxW"
    dict_2 = {}
    none_type_1 = atom1_feed_0.add_item(
        str_4, str_5, str_1, str_3, pubdate=dict_0, **dict_2
    )
    assert atom1_feed_0.items == [
        {
            "title": "f*sT#a>pI",
            "link": "/%60v+r;mIB[lUuxW",
            "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "author_email": "\"`+\x0cAP)ezT]'cg",
            "author_name": None,
            "author_link": None,
            "pubdate": {"RWb\nCx1D&": "RWb\nCx1D&"},
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_6 = 'B#\x0b<Tr\nr"'
    str_7 = rss201rev2_feed_0.writeString(str_5)
    assert (
        str_7
        == '<?xml version="1.0" encoding="/`v+r;mIB[lUuxW"?>\n<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>i</link><description>i</description><copyright>i</copyright><lastBuildDate>Tue, 11 Jul 2023 01:37:20 +0000</lastBuildDate></channel></rss>'
    )
    dict_3 = atom1_feed_0.root_attributes()
    str_8 = "j:5# m"
    str_9 = '7"_p(\x0bKG@"GZ!\'g{^dS'
    none_type_2 = rss201rev2_feed_0.add_item(
        str_6, str_8, str_9, categories=none_type_0, updateddate=rss201rev2_feed_0
    )
    assert len(rss201rev2_feed_0.items) == 1
    str_10 = module_8.get_address_list(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_36():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "f*sT#a>pI"
    dict_1 = rss201rev2_feed_0.root_attributes()
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_3 = 'B#\x0b<Tr\nr"'
    none_type_2 = rss201rev2_feed_0.add_item(
        atom1_feed_0,
        str_2,
        none_type_1,
        author_link=str_0,
        pubdate=dict_1,
        comments=rss201rev2_feed_0,
        unique_id_is_permalink=atom1_feed_0,
        item_copyright=str_0,
        ttl=str_3,
        **dict_1,
    )
    rss201rev2_feed_0.writeString(dict_1)


def test_case_37():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = ";ZR.]k (z?&XH:^D.L"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": ";ZR.]k%20(z?&XH:%5ED.L",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": ";ZR.]k (z?&XH:^D.L",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    str_2 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_3 = "ewW/5w|%+qwU0>Iy,*j"
    rss201rev2_feed_1 = module_0.Rss201rev2Feed(
        str_0, str_1, str_3, str_1, categories=str_0, feed_copyright=str_3, ttl=str_1
    )
    assert rss201rev2_feed_1.feed == {
        "title": "RWb\nCx1D&",
        "link": ";ZR.]k%20(z?&XH:%5ED.L",
        "description": "ewW/5w|%+qwU0>Iy,*j",
        "language": ";ZR.]k (z?&XH:^D.L",
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": ["R", "W", "b", "\n", "C", "x", "1", "D", "&"],
        "feed_url": None,
        "feed_copyright": "ewW/5w|%+qwU0>Iy,*j",
        "id": ";ZR.]k (z?&XH:^D.L",
        "ttl": ";ZR.]k (z?&XH:^D.L",
    }
    str_4 = "Translation blocks must not include other block tags: %s (%sline %d)"
    str_5 = "\n    Set up the GNUTranslations context with regard to output charset.\n\n    This translation object will be constructed out of multiple GNUTranslations\n    objects by merging their catalogs. It will construct an object for the\n    requested language and add a fallback to the default language, if it's\n    different from the requested language.\n    "
    atom1_feed_0 = module_0.Atom1Feed(
        str_4,
        str_5,
        str_2,
        author_name=none_type_0,
        feed_copyright=str_2,
        feed_guid=none_type_0,
    )
    assert atom1_feed_0.feed == {
        "title": "Translation blocks must not include other block tags: %s (%sline %d)",
        "link": "%0A%20%20%20%20Set%20up%20the%20GNUTranslations%20context%20with%20regard%20to%20output%20charset.%0A%0A%20%20%20%20This%20translation%20object%20will%20be%20constructed%20out%20of%20multiple%20GNUTranslations%0A%20%20%20%20objects%20by%20merging%20their%20catalogs.%20It%20will%20construct%20an%20object%20for%20the%0A%20%20%20%20requested%20language%20and%20add%20a%20fallback%20to%20the%20default%20language,%20if%20it's%0A%20%20%20%20different%20from%20the%20requested%20language.%0A%20%20%20%20",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "id": "\n    Set up the GNUTranslations context with regard to output charset.\n\n    This translation object will be constructed out of multiple GNUTranslations\n    objects by merging their catalogs. It will construct an object for the\n    requested language and add a fallback to the default language, if it's\n    different from the requested language.\n    ",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    dict_1 = atom1_feed_0.root_attributes()
    str_6 = "FuMuzlgH:"
    none_type_1 = atom1_feed_0.add_item(
        str_5, str_6, rss201rev2_feed_0, comments=none_type_0
    )
    str_7 = "ajqls\r09(qSu\t@+<K>"
    str_8 = rss201rev2_feed_1.writeString(str_7)
    assert (
        str_8
        == '<?xml version="1.0" encoding="ajqls\r09(qSu\t@+<K>"?>\n<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RWb\nCx1D&amp;</title><link>;ZR.]k%20(z?&amp;XH:%5ED.L</link><description>ewW/5w|%+qwU0&gt;Iy,*j</description><language>;ZR.]k (z?&amp;XH:^D.L</language><category>R</category><category>W</category><category>b</category><category>\n</category><category>C</category><category>x</category><category>1</category><category>D</category><category>&amp;</category><copyright>ewW/5w|%+qwU0&gt;Iy,*j</copyright><lastBuildDate>Tue, 11 Jul 2023 01:37:20 +0000</lastBuildDate><ttl>;ZR.]k (z?&amp;XH:^D.L</ttl></channel></rss>'
    )
    dict_2 = atom1_feed_0.root_attributes()
    str_9 = "4?o]sCC"
    str_10 = "aa>c/6p"
    none_type_2 = rss201rev2_feed_0.add_item(
        str_9, str_10, str_0, item_copyright=none_type_1, enclosures=none_type_0
    )
    assert rss201rev2_feed_0.items == [
        {
            "title": "4?o]sCC",
            "link": "aa%3Ec/6p",
            "description": "RWb\nCx1D&",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_11 = rss201rev2_feed_0.writeString(none_type_2)
    assert (
        str_11
        == '<?xml version="1.0" encoding="None"?>\n<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RWb\nCx1D&amp;</title><link>;ZR.]k%20(z?&amp;XH:%5ED.L</link><description>RWb\nCx1D&amp;</description><lastBuildDate>Tue, 11 Jul 2023 01:37:20 +0000</lastBuildDate><item><title>4?o]sCC</title><link>aa%3Ec/6p</link><description>RWb\nCx1D&amp;</description></item></channel></rss>'
    )


@pytest.mark.xfail(strict=True)
def test_case_38():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_1, str_0, **dict_0)
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert rss201rev2_feed_0.items == []
    atom1_feed_0 = module_0.Atom1Feed(
        str_1, str_0, str_1, author_name=str_0, subtitle=str_1, categories=none_type_0
    )
    assert atom1_feed_0.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "f*sT#a>pI"
    int_0 = rss201rev2_feed_0.num_items()
    dict_1 = rss201rev2_feed_0.root_attributes()
    none_type_1 = atom1_feed_0.add_item(
        str_0, str_2, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_0.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_3 = atom1_feed_0.writeString(str_2)
    str_4 = atom1_feed_0.writeString(rss201rev2_feed_0)
    dict_2 = atom1_feed_0.root_attributes()
    str_5 = ""
    none_type_2 = atom1_feed_0.add_item(
        none_type_0, str_3, str_0, str_0, author_link=none_type_0, pubdate=str_5
    )
    atom1_feed_0.writeString(str_5)


@pytest.mark.xfail(strict=True)
def test_case_39():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_2 = "67ammG~C#;iiHTBJ=i"
    str_3 = "-pFEPph@"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(
        str_2, str_1, str_3, author_email=dict_0
    )
    assert (
        f"{type(rss201rev2_feed_0).__module__}.{type(rss201rev2_feed_0).__qualname__}"
        == "feedgenerator_typed.Rss201rev2Feed"
    )
    assert rss201rev2_feed_0.feed == {
        "title": "67ammG~C#;iiHTBJ=i",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "-pFEPph@",
        "language": None,
        "author_email": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
    }
    assert rss201rev2_feed_0.items == []
    str_4 = "Z\n^qT,*2_l"
    atom1_feed_0 = module_0.Atom1Feed(
        str_4,
        str_2,
        str_4,
        author_email=str_2,
        author_name=rss201rev2_feed_0,
        categories=str_1,
        feed_guid=str_3,
    )
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    dict_1 = atom1_feed_0.root_attributes()
    none_type_1 = atom1_feed_0.add_item(
        atom1_feed_0, none_type_0, str_4, item_copyright=str_1
    )
    str_5 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:28:05.761957+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    atom1_feed_0.writeString(str_5)


@pytest.mark.xfail(strict=True)
def test_case_40():
    none_type_0 = None
    str_0 = "RWb\nCx1D&"
    dict_0 = {str_0: str_0}
    str_1 = "fw@e=Ic"
    atom1_feed_0 = module_0.Atom1Feed(
        none_type_0, none_type_0, str_1, str_0, feed_copyright=dict_0, **dict_0
    )
    assert (
        f"{type(atom1_feed_0).__module__}.{type(atom1_feed_0).__qualname__}"
        == "feedgenerator_typed.Atom1Feed"
    )
    assert atom1_feed_0.feed == {
        "title": None,
        "link": None,
        "description": "fw@e=Ic",
        "language": "RWb\nCx1D&",
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": "{'RWb\\nCx1D&': 'RWb\\nCx1D&'}",
        "id": None,
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    assert atom1_feed_0.items == []
    assert module_0.Atom1Feed.content_type == "application/atom+xml; charset=utf-8"
    assert module_0.Atom1Feed.ns == "http://www.w3.org/2005/Atom"
    str_2 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    rss201rev2_feed_0 = module_0.Rss201rev2Feed(str_0, str_2, str_0, **dict_0)
    assert rss201rev2_feed_0.feed == {
        "title": "RWb\nCx1D&",
        "link": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "description": "RWb\nCx1D&",
        "language": None,
        "author_email": None,
        "author_name": None,
        "author_link": None,
        "subtitle": None,
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "ttl": None,
        "RWb\nCx1D&": "RWb\nCx1D&",
    }
    atom1_feed_1 = module_0.Atom1Feed(
        str_2, str_0, str_2, author_name=str_0, subtitle=str_2, categories=none_type_0
    )
    assert atom1_feed_1.feed == {
        "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "link": "RWb%0ACx1D&",
        "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "language": None,
        "author_email": None,
        "author_name": "RWb\nCx1D&",
        "author_link": None,
        "subtitle": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
        "categories": (),
        "feed_url": None,
        "feed_copyright": None,
        "id": "RWb\nCx1D&",
        "ttl": None,
    }
    str_3 = "f*sT#a>pI"
    dict_1 = rss201rev2_feed_0.root_attributes()
    none_type_1 = atom1_feed_1.add_item(
        str_0, str_3, none_type_0, unique_id=none_type_0, enclosures=none_type_0
    )
    assert atom1_feed_1.items == [
        {
            "title": "RWb\nCx1D&",
            "link": "f*sT#a%3EpI",
            "description": None,
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": None,
            "unique_id_is_permalink": None,
            "enclosures": (),
            "categories": (),
            "item_copyright": None,
            "ttl": None,
        }
    ]
    str_4 = atom1_feed_1.writeString(str_3)
    dict_2 = atom1_feed_1.root_attributes()
    str_5 = "%%(s"
    str_6 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.650253+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    str_7 = "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E"
    bool_0 = True
    none_type_2 = rss201rev2_feed_0.add_item(
        str_6,
        str_3,
        str_7,
        author_link=none_type_0,
        unique_id=str_2,
        unique_id_is_permalink=bool_0,
        item_copyright=str_7,
    )
    assert rss201rev2_feed_0.items == [
        {
            "title": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.650253+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "link": "f*sT#a%3EpI",
            "description": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "author_email": None,
            "author_name": None,
            "author_link": None,
            "pubdate": None,
            "updateddate": None,
            "comments": None,
            "unique_id": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:35.452702+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "unique_id_is_permalink": True,
            "enclosures": (),
            "categories": (),
            "item_copyright": "%3C?xml%20version=%221.0%22%20encoding=%22-P0%0CD~m%22?%3E%0A%3Cfeed%20xmlns=%22http://www.w3.org/2005/Atom%22%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22RWb%0ACx1D&amp;%22%20rel=%22alternate%22/%3E%3Cid%3ERWb%0ACx1D&amp;%3C/id%3E%3Cupdated%3E2023-07-11T01:26:54.642088+00:00%3C/updated%3E%3Centry%3E%3Ctitle%3ERWb%0ACx1D&amp;%3C/title%3E%3Clink%20href=%22-P0%0CD~m%22%20rel=%22alternate%22/%3E%3Cid%3Etag:None:-P0%0CD~m/%3C/id%3E%3C/entry%3E%3C/feed%3E",
            "ttl": None,
        }
    ]
    str_8 = rss201rev2_feed_0.writeString(str_5)
    module_8.get_attrtext(none_type_2)
