# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import decorators as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = -1053
    set_0 = {int_0, int_0, int_0}
    var_0 = module_0.make_middleware_decorator(set_0)
    var_1 = module_0.method_decorator(var_0)
    var_2 = var_0.__get__(var_0, var_0)
    module_0.classonlymethod()


def test_case_1():
    str_0 = "LANGUAGE_CODE"
    var_0 = module_0.decorator_from_middleware_with_args(str_0)
    none_type_0 = None
    var_1 = module_0.decorator_from_middleware(none_type_0)
    none_type_1 = None
    var_2 = module_0.method_decorator(none_type_1, none_type_1)


def test_case_2():
    dict_0 = {}
    var_0 = module_0.decorator_from_middleware(dict_0)
    complex_0 = -1632.95621 + 1068j
    var_1 = module_0.decorator_from_middleware(complex_0)
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0, bool_0]
    var_2 = module_0.make_middleware_decorator(bool_0)
    var_3 = module_0.method_decorator(list_0)
    with pytest.raises(AttributeError):
        list_0.__get__(var_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    module_0.classonlymethod()


def test_case_4():
    bool_0 = True
    var_0 = module_0.decorator_from_middleware_with_args(bool_0)


def test_case_5():
    none_type_0 = None
    var_0 = module_0.decorator_from_middleware(none_type_0)


def test_case_6():
    str_0 = "M3\n/-\n\x0c\x0c9!Hs7SjTL"
    var_0 = module_0.make_middleware_decorator(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    module_0.sync_and_async_middleware(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 1233
    module_0.sync_only_middleware(int_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "M3\n/-\n\x0c\x0c9!Hs7SjTL"
    module_0.async_only_middleware(str_0)


def test_case_10():
    str_0 = "P"
    none_type_0 = None
    classonlymethod_0 = module_0.classonlymethod(*str_0)
    with pytest.raises(AttributeError):
        classonlymethod_0.__get__(str_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "P"
    none_type_0 = None
    classonlymethod_0 = module_0.classonlymethod(*str_0)
    var_0 = classonlymethod_0.__get__(none_type_0, str_0)
    var_1 = module_0.decorator_from_middleware_with_args(str_0)
    module_0.sync_and_async_middleware(str_0)
